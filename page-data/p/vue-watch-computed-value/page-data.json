{"componentChunkName":"component---src-templates-post-js","path":"/p/vue-watch-computed-value/","result":{"data":{"markdownRemark":{"id":"74d689fd-cfc3-5902-952d-475395851111","excerpt":"各位五一快乐，最近工作比较忙，来拿点工作中遇到的问题水一水。在 Vue 中我们经常使用  来监听响应式变量的变化。有时，我们需要监听多个变量，但执行同样的逻辑，这时写多个  就很浪费。不难想到，可以使用  把这几个变量组合起来，这样只需监听这个单独的计算属性就可以了。 下面的例子展示了这一用法：当  和 Post…","html":"<p>各位五一快乐，最近工作比较忙，来拿点工作中遇到的问题水一水。在 Vue 中我们经常使用 <code class=\"language-text\">watch</code> 来监听响应式变量的变化。有时，我们需要监听多个变量，但执行同样的逻辑，这时写多个 <code class=\"language-text\">watch</code> 就很浪费。不难想到，可以使用 <code class=\"language-text\">computed</code> 把这几个变量组合起来，这样只需监听这个单独的计算属性就可以了。</p>\n<p>下面的例子展示了这一用法：当 <code class=\"language-text\">id</code> 和 Post 表单的 <code class=\"language-text\">title</code> 属性变化时，打印一行日志。   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> App<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span>\n        desc<span class=\"token operator\">:</span> <span class=\"token string\">'Lorem ipsum'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mutableParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        title<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>title\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    mutableParams<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triggered'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Post Title<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"post.title\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Post Desc<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"post.desc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但现实往往并没有那么简单。假设我们需要把 Post 表单封装成一个单独的组件：   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> PostForm<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    modelValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update:modelValue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Post Title<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"modelValue.title\"</span> @input<span class=\"token operator\">=</span><span class=\"token string\">\"emit('title', $event.target.value)\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Post Desc<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"modelValue.desc\"</span> @input<span class=\"token operator\">=</span><span class=\"token string\">\"emit('desc', $event.target.value)\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>然后用这个组件替换掉上文的例子：   </p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-diff line-numbers\"><code class=\"language-diff\"><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>!-- App.vue -->\n</span>...\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>template>\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> &lt;div>ID: &lt;input v-model=\"id\" />&lt;/div>\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>   &lt;div>Post Title: &lt;input v-model=\"post.title\" />&lt;/div>\n<span class=\"token prefix deleted\">-</span>   &lt;div>Post Desc: &lt;input v-model=\"post.desc\" />&lt;/div>\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   &lt;post-form v-model=\"post\" />\n</span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>/template></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看上去一切天衣无缝。但倘若你编辑了 Post 表单的 <code class=\"language-text\">desc</code> 属性，会发现日志依旧被打出了，即使我们并没有监听 <code class=\"language-text\">desc</code> 的变化。这显然是与我们的预期不符的。<br>\n……<br>\n……<br>\n相信各位身经百战的读者们很快就能发现问题所在。当 <code class=\"language-text\">PostForm</code> 封装为组件之后，无论是修改 <code class=\"language-text\">title</code> 还是 <code class=\"language-text\">desc</code> ，都会为 <code class=\"language-text\">post</code> 对象赋一个新值。而 Vue 的 <code class=\"language-text\">computed</code> 通过依赖收集机制，将 <code class=\"language-text\">this.post</code> 作为了依赖。一旦 <code class=\"language-text\">post</code> 对象改变，就会重新触发 <code class=\"language-text\">computed</code> 生成新的 <code class=\"language-text\">mutableParams</code> 对象，进而触发 <code class=\"language-text\">watch</code> 的逻辑。   </p>\n<hr>\n<p>那么我们该如何解决这个问题呢？   </p>\n<p>一个显而易见的想法是，既然问题出在每次编辑都会产生一个新的 <code class=\"language-text\">post</code> 对象，那么我们只要让编辑前后的 <code class=\"language-text\">post</code> 对象保持不变就可以了。基于这种思路，可做出如下改动：   </p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-diff line-numbers\"><code class=\"language-diff\"><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>!-- PostForm.vue -->\n</span>...\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> methods: {\n<span class=\"token prefix unchanged\"> </span>   emit(key, value) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>     this.$emit('update:modelValue', { ...this.modelValue, [key]: value })\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     this.$emit('update:modelValue', Object.assign(this.modelValue, { [key]: value }))\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   }\n<span class=\"token prefix unchanged\"> </span> }\n</span>...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>虽然这样解决了问题，但这并不是种好做法。该方法本质上是直接修改了组件 <code class=\"language-text\">prop</code> 的值，而这是<a href=\"https://v3.cn.vuejs.org/guide/component-props.html#:~:text=%E6%B3%A8%E6%84%8F%E5%9C%A8%20JavaScript%20%E4%B8%AD%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E6%98%AF%E9%80%9A%E8%BF%87%E5%BC%95%E7%94%A8%E4%BC%A0%E5%85%A5%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E5%AF%B9%E4%BA%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E6%88%96%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%20prop%20%E6%9D%A5%E8%AF%B4%EF%BC%8C%E5%9C%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E6%94%B9%E5%8F%98%E8%BF%99%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%88%96%E6%95%B0%E7%BB%84%E6%9C%AC%E8%BA%AB%E5%B0%86%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%8C%E4%B8%94%20Vue%20%E6%97%A0%E6%B3%95%E4%B8%BA%E6%AD%A4%E5%90%91%E4%BD%A0%E5%8F%91%E5%87%BA%E8%AD%A6%E5%91%8A%E3%80%82%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E8%A7%84%E5%88%99%EF%BC%8C%E5%BA%94%E8%AF%A5%E9%81%BF%E5%85%8D%E4%BF%AE%E6%94%B9%E4%BB%BB%E4%BD%95%20prop%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E7%A7%8D%E5%81%9A%E6%B3%95%E6%97%A0%E8%A7%86%E4%BA%86%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%8C%E4%B8%94%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82\">官方文档中明确不推荐的</a>，会让数据流变得混乱。这种场景下我们把对象作为值类型，还是使用不可变数据结构更好一些。</p>\n<p>另一个问题是，一个合理的组件设计，调用者只需关注它对外暴露的接口，而无需关心内部实现。但这种情况下不同的内部实现却会影响到外部逻辑的正确性，这显然是不合理的。更何况很多时候我们根本无法控制某个第三方组件的内部实现。   </p>\n<hr>\n<p>还有个比较简单粗暴的想法是，既然是 watch computed value 引发的问题，那干脆回归到最原始的模式，只 watch primitive value，这样就不用考虑引用变化的问题。在这种做法上 Vue3 有着绝对的优势，因为 Vue3 的 <code class=\"language-text\">watch</code> API 支持传入多个值：   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> App<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> PostForm <span class=\"token keyword\">from</span> <span class=\"token string\">'./PostForm.vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>watch<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n  \n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span> desc<span class=\"token operator\">:</span> <span class=\"token string\">'Lorem ipsum'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> id<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triggered'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在老项目中，如果要一个一个写 <code class=\"language-text\">watch</code> option 也太蠢了。可以利用 <code class=\"language-text\">computed</code> + 循环 + <code class=\"language-text\">$watch</code> 来模拟类似的效果：   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutableParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutableParams<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triggered'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>姑且不提这种做法很不优雅，即使它可以解决示例的这一个问题，但也难以成为一种通用的解决方案。如果我们的 <code class=\"language-text\">mutableParams</code> 需可动态配置、会增减字段，或是存在更深的嵌套层次等，就很难继续按照这个思路写下去了。   </p>\n<hr>\n<p>我们还是需要循其本。当我们使用 <code class=\"language-text\">watch</code> 时，我们期望的效果是当 <code class=\"language-text\">watch</code> 的目标值变化时触发监听。但 <code class=\"language-text\">watch</code> 的实现原理是，当目标的依赖变化时触发监听。虽然在绝大多数的情况下两者的效果是相等的，但它们并不是彼此的充要条件。</p>\n<p>如果我们监听的目标值发生了变化，那么一定是它的依赖发生了变化，但反过来，当它的依赖发生变化时，并不能推出目标值最终也一定变化了。而这个例外，最容易出现的情况就是在 <code class=\"language-text\">watch</code> 一个 <code class=\"language-text\">computed</code> value 时。</p>\n<p>严格来说，问题的根源是我们期望的“变化”与代码层面的“变化”定义不同。因此，如果我们能够自定义判断是否“变化”的方法（类似重写 JavaBean 的 <code class=\"language-text\">equals</code> 方法），这个问题就迎刃而解了。   </p>\n<p>与 Vue 响应式原理类似的状态管理库 MobX 就内置了类似的方法。在 MobX 中，可以在定义 <code class=\"language-text\">computed</code> 或 <code class=\"language-text\">watch</code> 时提供一个<a href=\"https://mobx.js.org/computeds.html#equals\">自定义的比较函数</a>，如下例所示：   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span>\n    desc<span class=\"token operator\">:</span> <span class=\"token string\">'Lorem ipsum'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> mutableParams <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>title\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 相当于 Vue 中的 watch</span>\n<span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mutableParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triggered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 对前后的值做一次浅比较，结果不同时才触发监听器逻辑</span>\n  <span class=\"token comment\">// 也可以换成深比较，或任何自定义的比较逻辑</span>\n  <span class=\"token punctuation\">{</span> equals<span class=\"token operator\">:</span> comparer<span class=\"token punctuation\">.</span>shallow <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">runInAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 不会触发 console.log</span>\n  data<span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span>\n    desc<span class=\"token operator\">:</span> <span class=\"token string\">'something else'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Vue 并没有提供这种开箱即用的内置选项，不过在有了思路之后也很容易自己实现。考虑到无论哪种比较方式的必要条件都是依赖发生变化，我们只需在 <code class=\"language-text\">watch</code> 内部额外做一层判断即可。   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> App<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">...</span>\n  watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    mutableParams<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// equals 是任意的判断相等性的方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triggered'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<p>总的来说不是个很难的问题，不过在复杂项目中偶然遇到一次还是挺搞人心态的。不知为何网上也都找不到相关的讨论，故在此抛砖引玉一下。如果大家有更好的想法，欢迎一起交流~   </p>","frontmatter":{"title":"【Vue】当你 watch 一个 computed value…","date":"2022/05/11","tags":["Vue"],"prompt":null},"fields":{"slug":"/vue-watch-computed-value/","encrypted":null}}},"pageContext":{"id":"74d689fd-cfc3-5902-952d-475395851111"}},"staticQueryHashes":["1633816651","3000541721","3000541721"]}