{"componentChunkName":"component---src-templates-post-js","path":"/p/iife-statement-to-expression/","result":{"data":{"markdownRemark":{"id":"76fcd3a3-db86-535f-b402-e796edcf2862","excerpt":"之前发了一个有关 JavaScript 中立即执行函数（IIFE）的想法，但还想多写一点东西。立即执行函数是 JavaScript 中很特殊的一种用法。由于 JavaScript 原生没有成熟的模块化机制，立即执行函数曾被广泛地用于编写独立的模块和库，以防止全局变量的名称冲突，但随着 ES…","html":"<p>之前发了一个有关 JavaScript 中<em>立即执行函数（IIFE）</em>的想法，但还想多写一点东西。立即执行函数是 JavaScript 中很特殊的一种用法。由于 JavaScript 原生没有成熟的模块化机制，立即执行函数曾被广泛地用于编写独立的模块和库，以防止全局变量的名称冲突，但随着 ES6 标准对于模块化和块级作用域支持的完善，这种用法也逐渐退出了历史舞台，顶多出现在被 Polyfill 转译的代码里。</p>\n<p>在网上的讨论中，提到立即执行函数的作用，基本上都是说用于隔离作用域，防止全局命名空间冲突。但在实践中我发现了它的另一个作用，即将任意 <strong>statement</strong> 转化为 <strong>expression</strong> 的能力。</p>\n<!--more-->\n<h2>statement 与 expression</h2>\n<p>在学习编程时，我们就学到过 statement 和 expression 这两个概念，但是当时我完全没有在意这些偏理论性的名词，因为觉得直接看代码就很直观了，不讨论这些名词也不妨碍我写代码。一直到代码经验比较多了，且接触了各种不同语言的语法和一些奇技淫巧，才逐渐意识到区分这两者的重要性。</p>\n<p>为了写这篇文章，我特意 Google 了一下 statement 和 expression 的准确定义，但发现网上也是众说纷纭，有把它们作为两个对等的概念的，也有说是包含关系的。但抛开这些定义上的细节不同，大家对两者的差别还是有共识的：</p>\n<blockquote>\n<p>expression 是一段执行以后会返回一个值的代码，而 statement 只是执行一段逻辑，并不产生一个返回值。</p>\n</blockquote>\n<p>在大多数语言中，expression 主要包括数字、字符串等字面量以及连接它们的运算符，而 statement 会包含一些赋值与控制流语句。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// expressions:</span>\n<span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"expression\"</span>\n<span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> x <span class=\"token operator\">*</span> x \n\n<span class=\"token comment\">// statements:</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>将 statement 转化为 expression</h2>\n<p>让我们关注一个常见的使用场景：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some other logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">default</span> logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这段代码根据 <code class=\"language-text\">id</code> 的值不同，执行不同的逻辑，并将计算后的值赋给 <code class=\"language-text\">this.name</code> 变量。<code class=\"language-text\">switch</code> 语句是典型的 statement ，它根据值的不同进入不同的分支。但很多时候每个分支的逻辑是类似的，例如上面的例子，我们计算的结果最终都是为了赋值，那这个赋值的操作就被重复了多次，引起了代码冗余，很不优雅。</p>\n<p>有些语言中支持一种名为 switch expression 的语法，顾名思义，这种语法支持将 <code class=\"language-text\">switch</code> 语句变成一个 expression，执行完后返回一个值。用这种语法改写后的代码形如：（伪代码）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some other logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">default</span> logic<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看到确实简洁了很多。</p>\n<p>JavaScript 目前并不支持这样的做法，但通过立即执行函数，我们可以变通地实现这一功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some other logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">default</span> logic<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>得益于它是一个函数，不仅是 <code class=\"language-text\">switch</code> 语句，条件判断、循环等语句，甚至是更加复杂的逻辑，都可以使用这种方式转化为一个 expression 。</p>\n<h2>这样做有意义吗？</h2>\n<p>从功能的角度，确实原本的 <code class=\"language-text\">switch</code> 语句功能也完全够用了，要说代码冗余也不是很严重，这么做并没有特别明显的好处。但是从代码的优雅与可读性的角度，我认为改写成 expression 的形式确实更好一些。</p>\n<p>一个佐证是 Java 在 JDK 12 中也增加了对 switch expression 的支持。作为一门被广泛使用的工业级语言，Java 并不一直追求最时髦的语言特性，甚至被人诟病语法繁琐臃肿（虽然最近已经大大加快了迭代的节奏）。连 Java 中都如此高优先级地对这一语法做了支持，足以说明这一功能在程序员中的呼声是很大的。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> SAT<span class=\"token punctuation\">,</span> SUN<span class=\"token operator\">:</span> <span class=\"token keyword\">break</span> <span class=\"token string\">\"Weekend day\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> MON<span class=\"token punctuation\">,</span> TUS<span class=\"token punctuation\">,</span> WED<span class=\"token punctuation\">,</span> THU<span class=\"token punctuation\">,</span> FRI<span class=\"token operator\">:</span> <span class=\"token keyword\">break</span> <span class=\"token string\">\"Working day\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid day: \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 JavaScript 中，除了与其他语言相同的应用场景之外，还有一个场合可能会用到立即执行函数封装后的 expression，那就是 React 的 JSX 语法。我们经常需要根据条件渲染 JSX 元素，但在 JSX 中混入逻辑代码时，代码的内容必须为 expression，这时我们就可以用上这个技巧。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CompA</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"B\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CompB</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"C\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CompC</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CompA</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>从更宏观的角度来说，这实际上是需不需要将任何语句都设计为 expression 的问题。将代码分为 statement 和 expression 并不是理所当然的设计。例如，在函数式编程中，就没有 statement，只有 expression，通过 expression 的串联使代码更为简洁流畅。</p>\n<p>有些面向对象的语言也借鉴了这一思路，例如 Ruby 中几乎一切都是 expression，连类定义和方法定义也不例外。即使在传统的 OO 设计中，也涌现出了 Fluent interface 之类的设计，通过将 setter 改写为返回上下文的 expression 来实现优雅的流式接口调用。</p>\n<p>我个人还是很喜欢这样的设计理念的。当然这个话题比较大，就不离题下去讲了。</p>\n<h2>为什么是匿名函数？</h2>\n<p>回到 JavaScript ，也许有人会说，这没什么特别的，完全可以把逻辑抽取到一个独立的函数中来实现相同的效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getNameById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>some other logic<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">default</span> logic<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token function\">getNameById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样做当然可以。一般来说，如果是多次出现的可复用的逻辑，都是建议单独抽取成函数，减少代码重复。但函数也并不是拆分得越细越好的。如果这段逻辑与上下文关联比较紧密，拆分的成本会比较高，而且在阅读代码时需要上下文切换，理解多个参数之间的对应关系，降低了代码的可读性。而且函数的命名也是一个经常困扰开发者的问题。</p>\n<p>总的来说，虽然使用匿名函数来实现的原理和拆分函数是一样的，但是在这里我们不要过于纠结它的本质原理，而是充分利用 JavaScript 提供的简洁语法，将其作为一种语法糖来使用。（可以类比同样 JavaScript 中的 <code class=\"language-text\">!!</code> 语法，虽然从原理上来说并没有什么特别之处，但也经常出现在 x 个不为人知的 JavaScript 小技巧中。）</p>\n<h2>迁移到其他语言</h2>\n<p>其他语言中没有 JavaScript 的立即执行函数语法，那么它们能借鉴这一思路实现类似的功能吗？并不是不行。这里我们给出一个低版本的 Java 语言实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>some logic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>some other logic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span> logic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们使用 Java 中的匿名内部类来实现将 statement 转化为 expression 。<code class=\"language-text\">Callable</code> 老实说在 Java 中并不是很常用，可以理解为拥有了返回一个值的能力的 <code class=\"language-text\">Runnable</code> 。</p>\n<p>可以对比一下与 JavaScript 版本的区别。在 Java 版本中，匿名内部类的语法相对比较繁冗，虽然可以利用 Java 8 的 lambda 进一步简化，但终究省不了一些方法名和关键字的出现，而这会对阅读代码产生一定的视觉干扰；而 JavaScript 的立即执行函数配合箭头函数，全是由符号组成的，我们在阅读代码时可以很轻松地将其省略，聚焦到核心的逻辑上。</p>\n<p>另外 Java 中匿名内部类引用外部变量时，必须要把外部变量声明为 <code class=\"language-text\">final</code>  即不可变的，虽然很严谨不过写起来也会觉得比较麻烦。</p>\n<p>再次，Java 在编译时会把匿名内部类编译为一个单独的类，逻辑比较重，因此虽然这样写有一定好处，但并没有好到能够无视它的代价，去肆无忌惮使用的程度。</p>\n<p>其他语言中有没有类似的做法，我就不太清楚了。也许它们都比不上 JavaScript 中那么优雅简洁，不过本身也不失为一种有趣的用法，有兴趣的同学可以在项目中尝试一下。</p>\n<h2>结论</h2>\n<p>本文探索了一种通过立即执行函数来实现将任意 statement 转化为 expression ，以减少重复代码，提升可读性的方式，是一个鲜为人知但非常实用的技巧，很适合在 JavaScript 中使用。</p>","frontmatter":{"title":"立即执行函数的另一个作用","date":"2021/01/31","tags":["JavaScript"],"prompt":null},"fields":{"slug":"/iife-statement-to-expression/","encrypted":null}}},"pageContext":{"id":"76fcd3a3-db86-535f-b402-e796edcf2862"}},"staticQueryHashes":["1633816651","3000541721","3000541721"]}