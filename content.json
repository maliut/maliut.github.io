{"meta":{"title":"Mの综合研究","subtitle":"somewhere about myself","description":null,"author":"maliut","url":"http://maliut.space"},"pages":[{"title":"关于我","date":"2019-08-06T15:00:00.310Z","updated":"2019-08-06T15:00:00.310Z","comments":true,"path":"about/index.html","permalink":"http://maliut.space/about/index.html","excerpt":"","text":"这是一个施工中的页面 友情链接 N4A Space Thought fragments in Fin"}],"posts":[{"title":"工科生的音乐浪漫 - Sonic Pi","slug":"sonic-pi","date":"2019-12-22T15:07:00.000Z","updated":"2020-01-12T08:54:02.538Z","comments":true,"path":"2019/sonic-pi/","link":"","permalink":"http://maliut.space/2019/sonic-pi/","excerpt":"说起音乐创作，大多数人立刻就会将其划入艺术的范畴。而除非有专门学过相关的才艺，对于大多数像我们这样的工科生来说，中间仿佛横亘着一条巨大的鸿沟。但今天，我想向大家介绍一款神奇的软件，它在两者之间架起了一座桥梁。 这款软件叫做 Sonic Pi ，来自剑桥大学计算机实验室，目前支持 Windows、Mac、树莓派三个平台。它也是一款开源软件，在 Github 上获得了 5k+ stars 。","text":"说起音乐创作，大多数人立刻就会将其划入艺术的范畴。而除非有专门学过相关的才艺，对于大多数像我们这样的工科生来说，中间仿佛横亘着一条巨大的鸿沟。但今天，我想向大家介绍一款神奇的软件，它在两者之间架起了一座桥梁。 这款软件叫做 Sonic Pi ，来自剑桥大学计算机实验室，目前支持 Windows、Mac、树莓派三个平台。它也是一款开源软件，在 Github 上获得了 5k+ stars 。 从功能上来说，它可以被视为一个简单的 DAW（Digital Audio Workstation ，数字音频工作站），类似 Cubase 和 FL Studio 等的下位替代。但它的特点在于，使用编写代码而不是输入音符的方式来完成乐曲的制作（←但用到的代码很简单）。它的设计旨在于简单、强大和富有乐趣间取得平衡，而它也的确做到了。一方面，它被用于校园之中， 在创造乐曲的过程中教授学生以编程思维；另一方面，它强大的实时编码作曲能力，也被不少专业的艺术家和 DJ 作现场表演和音乐可视化等用途。 我花了点时间用 Sonic Pi 简单复刻了一首我非常喜欢的 BGM —— 来自《塞尔达传说 旷野之息》的 Kass’ Theme，但加入了些电音的风格。不如让我们在音乐声中，探索一下 Sonic Pi 的独特之处吧。 点此试听 简单易上手的程序设计阻碍大众进入音乐世界的第一道坎就是识谱了，各种五花八门的符号往往令人望而却步。不少人或许会觉得自己与音乐缘尽于此，但其实不然，作为艺术的音乐却与理工科有着不可分割的联系。让我们回想起曾经学过的知识。声音的本质是机械波。音乐的三要素中，响度对应波的振幅，音调对应波的频率，音色虽复杂些，但也逃不过是波形和频率的组合。而一首乐曲，无非是一系列声音在时间维度上的排列罢了。而五线谱，就是描述这一种排列的 DSL(Domain Specific Language, 领域特定语言)。能被沿用至今，它形象直观、信息密度大，一定程度上代表了业界的最佳实践。 但这东西毕竟还有不小的学习成本，而且在如今的信息时代，五线谱的图形化特征却也带来数字化表示与传播上的不便。那该怎么办呢？改用代码实现便再自然不过了。我们早已熟悉使用代码对全世界建模，区区一个音乐当然更是不在话下。随时间流淌的音符，是顺序结构；有时会有整段的重复，那就加个循环；重复中又会带点变化，一个 if-else 了事。Sonic Pi 使用 Ruby 作为它的宿主语言，利用它灵活、可读性强的优势，封装了一整套用于音乐制作的 API，即使对代码知之甚少的用户也能很快理解它的含义。而对熟悉代码的用户而言，能够编写代码，就意味着强大的可扩展性、无限的可能性。 （一段演奏旋律的代码，即使不懂含义，也能猜个八九不离十吧） 以随机性激发灵感Sonic Pi 并不只是一个冷冰冰的代码编辑器而已，相反，它为了让初学者顺利进入音乐的世界，准备了齐全的教程，事无巨细地讲解了各类音乐和代码的基础知识，以及软件使用的技巧。作者鼓励大家多做尝试，他的口头禅是 there are no mistakes, only opportunities 。 在教程中，我印象最深刻的是作者花了不小的篇幅讲解在音乐制作过程中随机数的应用。在学会软件的基础操作后，我们除了临摹现成的曲子，如果想要自己创作些新的旋律出来，往往会容易陷入无从下手，没有灵感的局面。这时候随机性就可以派上用场了，我们可以让计算机随机演奏，毫不费力地就可以让计算机帮我们擦出灵感的火花。Sonic Pi 也很贴心地为我们封装了好几种随机函数，免去了我们从零开始自己处理随机数的麻烦。 可能有人会问，我自己随便乱弹琴，不也能达到类似的效果么？且不说你的个人习惯是不是真的能让你的弹奏那么随机（想想自己乱按键盘的时候，是不是翻来覆去也就那么几个类似的 pattern），就算是有灵感产生了，过段时间以后你还确保自己能记得当时的旋律吗？但计算机的随机数就不一样了，它是一种伪随机数，只要设定相同的随机种子，得到的随机数序列永远是一样的，再也不用担心相同的旋律无法复现的问题。你甚至可以把它分享给朋友，让他们也能听到你的灵光一闪。 （ Sonic Pi 的界面，有黑白两种模式可选 ） 互操作性与工作流Sonic Pi 毕竟不是十全十美的软件，我在使用过程中也遇到一些问题，例如音源种类太少且难以加入新的音源、软件本身也不太稳定等。而且它毕竟是个小众软件，如果想要拿它认真做点东西，也要考虑到和主流软件的互操作性。换句话说，如果我们能把 Sonic Pi 的作品放入功能更加强大的软件中进行二次加工，那像音源或是功能缺失的问题都将不再是问题。 那么如何做到这一点呢？容易想到利用 MIDI 这一通用的计算机音乐格式。Sonic Pi 本身支持作为 MIDI 的输入或输出设备，但一般连接的都是实体的设备。理论上来说，我们也可以将另一个软件作为 Sonic Pi 的虚拟 MIDI 输出端，但本人对这方面实在是知之甚少，做了些尝试但都不算成功，不同系统下的区别也比较大。但换个思路想， MIDI 本来就是记录音乐的一种格式而已，只要我们知道它的格式定义，就可以把文件写出来，而写 MIDI 文件的方法，想必有现成的轮子可用。果然我找到了 MidiWriterJS 这个开源库，亲测可用。至于具体的用法我就不详细介绍了，有需要的朋友可以留言私下交流。 替代品使用代码编写音乐的工具并非只有 Sonic Pi 一个。正如有句名言所说：“任何可以使用 JavaScript 来编写的应用，最终都会由 JavaScript 编写。” 有一个开源库 Tone.js 也可以实现同样的目标。但相比于 Sonic Pi，它就简陋了很多。它更像是 Three.js 之于 WebGL，是对 Web Audio API 的一层简单封装。如果你事先没有对 Web Audio API 的概念有一定了解的话，将会很难上手使用，更不用说没有 GUI 与各种音源、效果了。至于优点嘛，就是无需下载客户端，以及可以更方便地与我上文提到的 MidiWriterJS 互相调用。有进阶编程经验的同学可以尝试一下。 附本文介绍的各种工具地址： Sonic Pi MidiWriterJS Tone.js","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"midi","slug":"midi","permalink":"http://maliut.space/tags/midi/"}]},{"title":"树","slug":"nice-tree","date":"2019-10-19T16:05:00.000Z","updated":"2019-10-20T05:15:36.296Z","comments":true,"path":"2019/nice-tree/","link":"","permalink":"http://maliut.space/2019/nice-tree/","excerpt":"","text":"又到了一年秋季，上班的路上，总能闻到桂花的独特芬芳。 我不是一个善于分辨植物的人，看着路边形态各异的树木和鲜花，也叫不出它们的名字。即使这次强行记住了，没过多久也会忘记。也无法通过鸟叫声来区分鸟的品种，虽然它们并不是植物。而偏偏很容易就能分辨出桂花，也仅仅是因为它的香味太过独特了。而闻到桂花香，也为我带来了秋天终于到来了的实感。 总而言之，桂花就是这么一种独特的存在。但桂花之于我的意义，除了提醒秋天已经到来以外，还有便是唤起了我对一篇快要鸽了四年的文章的回忆。没错，就是现在的这一篇，即使这四年里我未曾落下一笔，但对它的思路和内容却从未模糊半分。 那还要追溯到四年前的秋天，我来到复旦大学张江校区。从食堂到二教，沿着斜穿草坪的小径，每一天都能闻到一股熟悉的香味——路边那仅此一棵的孤零零的桂花树散发的香味。无需多想便能记起这熟悉感的来源。在效实时，从教室到食堂的路上也同样立着这样一棵桂花树，每个秋天都能闻到这浓郁的花香。虽然当时每天都是匆匆忙忙地经过，从未驻足欣赏过一次，也从未与同学朋友谈论起它，但经由这香味，它早已潜移默化地进入我的记忆深处，成为我回忆里效实不可分割的一部分。 桂花树毕竟是足够独特，以至于大家都能凭借嗅觉把它们分辨出来。可是大多数的树都默默无闻了许多，无论是在路边站岗还是在公园里错落，它们都几乎无法赢得路人游客的一丝注意力，仿佛只是理所当然地杵在那里罢了。当然这些也有可能是我的错觉，大家都很喜欢看树也说不定。至少对我来说，我对树的审美的觉醒，其实是有一个清晰的节点的。那应该也是在初入效实的某年初夏。从公交车站走到学校，路边是两排整齐的行道树。路早已熟悉到闭着眼睛都不会走错，路边的行道树自然也是熟视无睹。然而就在某一瞬间，也不知道为什么，这些树就突然变得可爱了起来。褐色的躯干，透着稳重的气息，但颜色又不至于深到令人乏味。错落有致的叶子，透过清晨的阳光，仿佛可以看到叶脉中流动着的水分子，翠绿色只能让人想到健康。树叶的绿色与树干的褐色又交织在一起，是顶级艺术家恰到好处的配色，挑不出半点瑕疵。一时间，我的目光完全无法从这些树中移开，腿也无法移动半分。当然后半句是编的，毕竟上学还是要上的。 自此以后每次走在上学路上，我都会用目光对这些行道树完成一次检阅。随着四季变迁，这些树木的形态和颜色逐渐褪去了我一见钟情时的那么可爱，但仍然有着那一份独属于树的独特美感。它们再也不是我以前从来不会为之投去注意力的平凡生物了。再后来，我将这些树写进了我的周记，虽然我贫乏的文字天赋并不能表现出它们的美感。虽然再优美的文字也不能表现出你亲眼见到它们时所能带来的美感。 自此以后，我对身边的树们也多多关注了起来。无论是上文说到的桂花树还是行道树，我与它们的结缘都与效实脱不了干系。可说到效实，就不能不说最能代表效实的树，效实的校树，银杏。 银杏，又称为树中活化石，植物中的大熊猫，是十分濒危的物种。这些都是我小时候在百科全书上看到的。所以当我后来在各地都看到了许多银杏，甚至拿它们当行道树时，我不禁十分疑惑——说好的濒危物种呢？不过好像也没什么不好的，就释然了。至于银杏为什么能成为效实的代表，好像是因为效实的老校区里就种着两棵标志性的银杏。当然这我是无从得见了。我所能拥有的印象，就是现在的校园里那一片郁郁葱葱的银杏林。 效实的银杏林的格局，是和别处不同的。都是依靠着学生必经之路旁的大草坪，树林之间见缝插针地立着童第周的雕像，当然最近也多了不少别人的。每每大考的时候，雕像前就会多出一些柚子、零食之类的东西，寄托着虔诚的学生希望取得佳绩的质朴心愿，虽然最终都被教务处笑纳。倘肯多花一些钱，就可以在毕业了以后认领其中一棵，在树底下插一块“ xx 届 xx 校友认栽”的小蓝牌子。不仅如此，每当学生毕业，大家都会三三两两自发聚在一起，以这些银杏树为背景留下高中最后的合影。每当校庆时分，又会有一个女主角躺在银杏树的脚下，透过指缝散落的阳光让自己睡着从而穿越到过去。 后来我去了清华和复旦，在那里我也见到了许多银杏。这两个校园里的银杏是何其相似：在一个巨大的、无比气派的、正对着学校大门的广场上，两排，或是不止两排的银杏树，整整齐齐地，就像接受检阅的士兵一样，一字排开，乖乖地呆在水泥瓷砖地面中特意为它们挖好的坑洞里面。那一瞬间我有点可怜它们。如果它们长在效实园里，它们不必如此刻板、拘谨。效实的银杏林的草坪足够大，足够让它们自由生长，自由发挥。虽然这些完全都是我的主观印象，但我想这确实是效实为我的思想带来的一些烙印。 银杏是效实园里当之无愧的主角，但就像在一个有很多妹子的氪金手游里面很多人都会找一个不那么热门的角色来主推一样，我偏爱的还是另一棵树。那棵树，就是一棵普通的平平无奇的树，我相信每个人都无数次地见过它的同类，但我从来叫不出它究竟叫什么名字。可这又有什么关系呢？我喜欢的只是那一株。我为它起好了特别的名字。我称它为「好树」。 「好树」并不是我脑子一热，随便取的名字。顾名思义，它是一棵很好的树，但也只是普通的好，并没有某一部分好的特别突出，能让我用更有针对性的名字来命名它。确切来说，它就是一棵树最标准的样子，因此它不是那么起眼，但如果你注意到了它，它的颜色，它的体型，它树冠的大小，都是恰到好处，让你感到非常舒服。 可作为一个理性人，舒服与否只是我的主观感受。有时候我就问自己，世界上的树这么多，凭什么我就认定它是一棵树的标准样式呢？后来我想了想，或许这和 Minecraft 有关。有段时间我疯狂迷恋这款游戏，直到现在我也只是因为开始晕 3D 才冷落了它。而作为一个 Minecraft 玩家，谁会不喜欢一棵树呢？当你两手空空地来到这个世界，没有树你就寸步难行，而哪怕只有一棵树，你就可以用它打造出整个世界。整个世界，用着默认材质包，开着最低特效，被某些人嘲笑玩的什么游戏。但我喜欢看着方形的太阳缓缓升起，金色的阳光撕裂浅蓝色的天空，越过锯齿状的河流，洒落在一片程序生成的橡树林里，在某一棵树下 Steve 举起右手，一个新世界在这里诞生。那些橡树，刨去一切随机要素的影响，本应该是一个模子刻出来的完全一致，但在也许并不那么精巧的算法安排下，此刻它们错落有致，共同组成了这一片有机、真实的丛林。它们都是好树。 大抵是每个人年少时，都觉得身边的世界充满了未曾见过的新鲜事物，声色犬马，它们无时不刻地拉扯着你有限的注意力。而只有在长大以后，面对周围一成不变、早已失去了新鲜感的现实，才能慢慢感受到平凡中蕴藏的美好。 大抵是每个人年轻时，都觉得自己会是花园里那独一无二的一株鲜花，是人们心中毋庸置疑的焦点。而只有在长大以后，才能将自己代入角落里那不太起眼的一棵树，接受自己只是树林里平庸的一份子的现实，但仍有着自己的坚持。 （知道你们好奇是哪棵树，但请不要对我充满强烈个人主观的审美体验抱有过高的期望） 那棵「好树」，大学毕业时我又回去看了它一次，今已亭亭如盖矣。我见证了它这几年的成长，正如同它见证了我的成长一样。褪去了初见时的青涩和稀疏，如今的它更加茂密且翠绿了，它依然是那棵「好树」。 它依然是一棵好树。","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[]},{"title":"4.22.23.06","slug":"4-22-23-06","date":"2019-04-22T15:06:00.000Z","updated":"2019-07-31T16:11:56.680Z","comments":true,"path":"2019/4-22-23-06/","link":"","permalink":"http://maliut.space/2019/4-22-23-06/","excerpt":"Life lives.","text":"Life lives. Incorrect Password! No content to display! ","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://maliut.space/tags/个人/"}]},{"title":"第三方收发微信消息主流技术小结","slug":"wechat-crack","date":"2019-03-03T13:33:36.000Z","updated":"2019-08-06T15:00:00.306Z","comments":true,"path":"2019/wechat-crack/","link":"","permalink":"http://maliut.space/2019/wechat-crack/","excerpt":"一篇水文。最近因为需要去了解了一下如何通过第三方技术收发微信的消息，以至于实现一些更复杂的功能。由于微信实际上并没有开放这方面的 API ，所以通俗来讲，就是研究了下如何破解微信的体系。","text":"一篇水文。最近因为需要去了解了一下如何通过第三方技术收发微信的消息，以至于实现一些更复杂的功能。由于微信实际上并没有开放这方面的 API ，所以通俗来讲，就是研究了下如何破解微信的体系。 大体的思路也比较好理解，就是通过微信的各个端入手来模拟。主流的做法大概有以下几种： Android 端 Hook原理： Android 中有著名的 Xposed 框架，可以 Hook 任何 App 的方法，在调用前后插入自己的逻辑。 对于收发微信消息来说，收消息相对比较简单，因为可以通过 Hook 数据库插入的方法来实现。而微信的数据库使用 wcdb ，表结构为了稳定也不会轻易变化。也就是说，只要能找到数据库插入的操作，稳定的 Hook 方式便可以一直存在。但是 Hook 发消息就没那么容易了。发消息是一组复杂的方法调用，当涉及到消息类型为图片、语音等复杂类型时还会更为复杂。找到发消息的方法已经是难事了，更何况混淆过后的代码还和天书一样，没有十足的耐心根本找不到线索。更甚，混淆后的方法名每个版本都不一样，可能你辛辛苦苦破解了一个版本，到了下一个版本，哪怕源码做了一丁点改动，你也要花费很大的工作量去适配。 从市面上来看，使用 Xposed 破解微信的主要用途还是在于消息防撤回和一些 UI 上的定制化，对于发消息的需求并不算多。另一方面，针对发消息的 Hook 开源代码也比较少，且不太成熟，有些人在兜售成熟的解决方案，尚不知道是否有用。尝试了一些开源代码以后，我找到个 WechatBotXposed（基于微信 6.6.6 版本） 还是比较靠谱的。 由于使用 Xposed 需要 Root 手机比较麻烦，这里也提供了一个尝试代价小的方案可供试玩： 手机安装 VirtualXposed 。 VirtualXposed 安装微信 6.6.6 版本（旧版本的微信可以通过豌豆荚安装，这不是广告） VirtualXposed 安装上述插件 启用插件并重启 VirtualXposed 如果想进一步开发，也可以看这篇讲 WechatBotXposed 的思路的文章，学习如何反编译分析微信的方法。 不过，对于这种破解方式，微信的打击还是比较厉害的。去年年中微信封禁了一波使用 Xposed 的帐号，据称是为了打击世界杯赌球。根据网上能看到的传闻，微信可能会读取手机中已安装应用的列表，判断手机是否被 Root 、是否安装了 Xposed 应用。也有一种方式是判断方法的调用栈中是否存在 Xposed 相关。当然，微信也存在一套行为分析的系统，会通过你登录频次、消息发送频次、设备信息等因素，判断帐号是否存在异常行为。 个人认为，对于这种方式，微信还是比较容易判断出来的。收消息暂且不论，对于发消息，本来是需要用户手动点击发送按钮，而现在一定会有某个函数触发了发消息的逻辑，一定能通过调用栈判断出来。事实上，我用这种方式玩了两天以后，微信就限制了我的帐号在低版本上的登录，必须让我在新版本上才能登录了。 使用 Android 上的辅助功能原理： Android 上的辅助功能，原本是给残障人士所使用，帮助他们更好地使用手机上的功能。但我们也可以利用这些功能来做到辅助读屏、模拟点击的功能。 获取屏幕上的控件或点击对应的按钮，需要我们知道界面元素的资源 ID ，所幸这并不需要什么高超的破解技巧，只要使用旧版的 DDMS 对手机界面进行 Dump 就可以了。虽然每次微信升级后，由于混淆的原因，资源 ID 会发生变化，但重新适配的成本也比 Xposed 方案低的多。再退一步讲，即使不知道界面元素的资源 ID ，也可以通过按钮的文字等来区分，这样就完全不需要破解或 Dump 之类的工作了。 辅助功能的适用场景正好和 Xposed 方案相反。对于发消息，它的实现非常容易，只要你能找到正确的发送对象，接下来输入框和发送按钮都是固定的，直接模拟点击即可。在 Github 上也可以找到现成的实现。但如何判断收消息就困难了不少，因为你很难去监测收到消息这一不是我们主动触发的行为。在网上找到了两种不同的思路，其一是通过监测通知栏的变动，其二是通过监测聊天界面的改变。但两种方式的缺陷也很明显，前者通知栏的推送并不稳定，同时多条通知处理起来也比较麻烦；后者则必须停留在某人的聊天界面中才能监测到。 也正是因为这样的特点，使用辅助功能的玩法一般用于实现各类微信群发助手。群发助手天然符合它的长处：一方面只管发消息，不管收消息；另一方面，对于所有人发送消息，也避免了判断发送对象是否正确的烦恼。 这种玩法最大的优势在于完全合法，无需考虑被微信打击的因素。但缺点也很明显，模拟点击的原理使得你不得不为操作加上一些延迟，一些从代码层面来看很简单的操作（比如获取微信号 etc）也需要绕很大的圈子才能做到。同时它受外界影响极大，一旦手机出现些不可预知的卡顿，或其他界面弹出，或同时交流的人数过多，界面变化频繁时，自动执行的操作就会被打断，甚至产生消息发错对象的尴尬。这使它注定只能作为玩具，而无法成为大规模商业化的应用。 使用微信网页版 API原理： Web 即意味着不设防，相比于其他客户端， Web 永远是防御力最薄弱的那个。另外 Web 并不是微信的主打方向，因此迭代速度较慢，版本适配难度也较低。只要破解了 Web API ，就可以模拟登录网页版微信收发消息了。 这个方法实在没有什么好说的，原理简单粗暴，以前的 Web QQ 也遭遇过这样的毒手。现在基于 Web 微信的机器人程序已经形成了一个庞大而成熟的开源社区，有着完善而优雅的 RESTful API 、命令行工具等。 相比前面两种方法，我认为这种做法是目前最成熟且具有可行性的。虽然这也属于破解的范畴，但是由于 Web 端的特定使然，微信并不能做出什么很有针对性的防御。不过微信并非没有采取措施。正如 Web QQ 现在已经被废弃一样，微信也一刀切地禁止了所有新注册帐号的 Web 端登录权限，坊间也一直有微信会取消 Web 版的传言。但即使微信不会取消 Web 版，光是新注册帐号无法登录这一举措，就使得这一方法未来的潜力大打折扣，沦为部分爱折腾的存量用户的玩具。另外，微信的风控体系，也会对那些明显超出频次调用接口的帐号进行临时的封禁，以阻止用户的为所欲为。 除了以上提到的几点， Web 版本身的功能也是有限的。除了简单的收发消息，进阶的功能比如收发红包、朋友圈等并没有相关的 API ，对于野心更大的开发者来说是个局限。另外，由于 Web 端走 HTTP 协议，对于收发消息的稳定性会比 Native 端略低。 其他途径上述提到的三种是目前的主流技术，但可以看到都有比较大的局限性，因此也有不少人在探索新的解决方案，例如基于 iPad 版和 PC 版的破解。当然，也曾见到技术实力较高的团队，通过自行定制 Android ROM 的方式，提供软硬件一体的解决方案，对微信做大规模的 Hack 。不过以上方案在网上都鲜有公开的资料流出，一方面是为了低调防打击，另一方面也是将其作为商业化的手段。 结语作为普通用户的我们难以想象基于微信这一看似封闭的 App 衍生出了多大的产业链。朋友圈的微商、公众号，还有现在的小程序和小游戏，已经完全可以支撑起一个像样的创业团队。也因此，对微信的破解成了一件十分有利可图的事，吸引了不少人前仆后继。对于时长脑洞大开的开发者如我，自然希望微信可以像 Telegram 那样开放出更多的 API ，以便把更多创意落到实处，但也理解关系链之于微信的重要性，明白这几乎就是天方夜谭。只是，对于那些把身家性命放在微信破解上的公司和开发者，就好像空中楼阁，被微信反手就能玩死，也未免太可悲了。","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[]},{"title":"如何寻找 YaHaHa ？","slug":"how-to-find-yahaha","date":"2018-06-05T12:45:16.000Z","updated":"2019-07-28T15:34:34.105Z","comments":true,"path":"2018/how-to-find-yahaha/","link":"","permalink":"http://maliut.space/2018/how-to-find-yahaha/","excerpt":"我第一次发现 YaHaHa ，是在初始高地的沼泽。半截中空的木桩通过铁链连接着沉入沼泽底部的大铁球。“铁球的大小，似乎刚好可以立在木桩之上”。刚学会磁铁能力的我对周围可以操作的事物充满了新鲜感，恨不得将它们通通把玩一番，于是怀着这样近乎恶作剧般的心态，我吸起铁球，放到了木桩之上。 “Ya-ha-ha! You found me!” 突如其来的场景吓了我一跳。","text":"我第一次发现 YaHaHa ，是在初始高地的沼泽。半截中空的木桩通过铁链连接着沉入沼泽底部的大铁球。“铁球的大小，似乎刚好可以立在木桩之上”。刚学会磁铁能力的我对周围可以操作的事物充满了新鲜感，恨不得将它们通通把玩一番，于是怀着这样近乎恶作剧般的心态，我吸起铁球，放到了木桩之上。 “Ya-ha-ha! You found me!” 突如其来的场景吓了我一跳。 我第二次发现 YaHaHa ，是在路边的峭壁上。峭壁上的三个小立方体组成了一个缺了个角的大正方形，而另一个小立方体则落在地上。“它们正好能拼成一个完整的正方形诶”，我把小立方体放到缺了的角上——又一个 YaHaHa 。 YaHaHa 的学名其实是克洛格，是《塞尔达传说 - 旷野之息》中的一种收集要素，它遍及整个大陆，有 900 个之多，但却都极为隐蔽，若是匆匆赶路，你完全不会意识到它们的存在，但如果你感到地图某处有说不出来的不对劲，往往就藏着它们的身影。 随着游戏的进行，我寻找 YaHaHa 越来越熟练：见到三棵树就会去摘苹果，见到荷叶就去跳水，爬到山顶看到石头就会去搬一搬。《旷野之息》很好玩，寻找 YaHaHa 也令人乐此不疲，只是，这过程中再没有多少思考。 再一次受到 YaHaHa 的惊喜，已经是游戏的后期。主线早已通关，而神庙也都找全。DLC 中有件“克洛格的面具”道具，能提示你周围还未找到的 YaHaHa 。有个同学告诉我卡卡利科村的村口响起了提示，但无论如何也找不到。我在周围上蹿下跳了半天也未果。 周围的一草一木，已经是再清楚不过了，它到底藏在哪里呢？我不得不放弃了徒劳无功的搜索，转而停下来思考。突然我灵光一闪——村口大门的横梁上有村子的标志，而四周歪歪扭扭地射了好几根箭。我第一次来到这个村庄的时候，箭还是稀有物品，我甚至还试图爬到上面去把这些箭都拔下来。现在想想，一个与世无争的村子，大门上被射了好多箭，这难道不奇怪吗？ 正对着中间的标志射了一箭。”Ya-ha-ha! You found me!” 熟悉的场景应声而出。 又一次，同学告诉我海利亚大桥上有个 YaHaHa 找不到。同样地来回绕桥探索但一无所获。我注意到桥洞下放着个小树枝。这个小树枝，其实我早已发现，但一直没放在心上，毕竟，满地图捡武器的塞尔达里，地上有个小树枝也是再正常不过的事情。然而再仔细一想，在茫茫大湖之上，全是石头做成的大桥，却出现了一个小树枝，也未免太突兀了吧。 捡起树枝，果然又是熟悉的场景。 尽管那个时候的我早已对游戏的各种机制都烂熟于心，见怪不怪，但当 YaHaha 蹦出来的那一瞬间，我的心还是不由自主地震颤了一下。 （海利亚大桥，游戏中 Yahaha 密度最高的区域之一） 作为在同伴中，收集个数最多的那一个，我也时常被问到该如何寻找 YaHaHa 。可是，在最开始时，我甚至不知道 YaHaHa 的存在，我去做那些事情纯粹是因为觉得有趣，觉得“它们应该是这样的”。而 YaHaHa 的出现，就像是玩家与游戏设计师的会心一笑，是设计师告诉玩家“你想的没错，恭喜你发现了这个小彩蛋”，是玩家与设计师之间跨越时空的心照不宣。但后来，收集 YaHaHa 成了目的，而我们也似乎逐渐陷入思维定势，觉得似乎 YaHaHa 就只有这么固定的几种，而忽略了 YaHaHa 设计的初心。 海拉鲁大陆 900 个 YaHaHa ，我踏遍世界，收集到的不过三分之一。想必，还有不少就隐藏在了那些被忽视了的非类型化的去处。 我觉得 YaHaHa 的设计其实就像是整个《旷野之息》的一个缩影：没有强制性的任务要求，也没有地图上明晃晃的提示点，它需要的是你像孩子一样敏锐的观察力和旺盛的好奇心，凭着本能发现这细节中隐藏的奥秘。而在网上无数玩家对《旷野之息》的溢美之词中，也都像个孩子一样倾诉着自己神奇的小发现、独一无二的探索旅程，仿佛三天三夜也说不完；也都不约而同地提到了这作是现在市面上无数套路式的、 checklist 式的所谓开放世界游戏中的一股清流，甚至于，重新定义了“开放世界”。 当然，天下苦 checklist 游戏久矣。无论是开放世界游戏中的任务点、收集点，还是平日里氪金手游中的日常周常等等，都是通过激发玩家的强迫症，而异化了最初玩游戏时那种纯粹追求快乐或是放松的心情。但想要让玩家以纯粹的兴趣和好奇心来驱动游戏却并非易事。而《旷野之息》的方方面面就是这样有机地结合在了一起，为这个问题交上了一份满分的答卷。在游戏伊始，当我操纵着林克从昏暗、窄小的复苏神庙走廊中奔跑出来，我和大多数人一样，被面前整片广阔的大陆所震撼。而更为震撼的是，我在游玩过程中慢慢发现，这映入眼帘的整片大陆的整个角落，完全没有空气墙之类的障碍，只要你愿意便都可以涉足（严格来说迷雾森林部分地方还是不行。另外想特别吐槽下 GTA5 ，虽然建筑这么多，但基本上都进不去）。而经过了精心设计的塔、神庙以及地形的布局，让玩家时刻都能发现视野中新的兴趣点，根本停不下来。再加上早已饱受赞誉的物理、化学系统带来的涌现式的玩法，以及简单且非强迫的主线等等，一切的一切都很好地服务了游戏的核心乐趣。 （是的，目之所及之处，你都可以去探索、去涉足） 关于《旷野之息》的设计经验和哲学，网上早已经有一大把分析文了。我也不是专业的游戏评论者和开发人员，无意再深入地探讨下去。我只想谈谈我自己的游玩感受。《旷野之息》，它真的是那种，那种很少见的那种，可以让人完全沉浸的游戏。我相信大家但凡是游戏玩的多了以后都有这样的感受：每遇到一个新游戏，便将它归为某一类，然后用之前在其他相同类型游戏中学到的经验套上去，边玩边开始分析哪里设计好、哪里不好。基本体验完一遍核心流程，做出个“剧情 x/10，画面 x/10，音乐 x/10，总评 x/10”的套路评价，就将其盖棺定论了。这其实是人类进化过程中发展出的一个能力，能让我们以更快的方式上手、了解一件新鲜事物。但是，总觉得与游戏间多了一层距离。而《旷野之息》则不然，它就像有魔力一般，它让我忘掉了各种条条框框的设计原理，忘掉了吃饭，忘掉了睡觉，无视了周围的一切，仿佛我真的穿越到了这片世界之中，或策马或御风遨游在大陆的各个角落。而又在事后与他人讨论起游戏来，才猛然意识到游戏中许许多多的理所当然，其实是有意为之，大巧不工，不禁慨叹设计的精巧与细节的充沛。 （沃托里村，依山面海，地图角落的世外桃源，唯一没有主线的自然村庄，也是我最喜欢的地方） 我很想用寻找 Yahaha 就是寻找玩游戏的初心，重塑看世界的方式这样既点题又漂亮的话来结束这篇文章。但在无脑吹完这个游戏以后，总还有一些话令人不吐不快。回想起在初始之塔上我举目四望，心情是难掩的激动。光小小一个初始台地，就让我产生了数不清的惊喜，那地图上初始台地以外的那么大那么大无边无际的黑暗之中，还有多么无尽的值得探索的去处在等着我呢？而当我完成大地图的最后一块拼图，完整的界面出现在我眼前，开心之余也多了一份遗憾。这个世界再大也有边界，终有一天我会踏遍海拉鲁的每一寸土地，世界在我面前将没有秘密可言。《旷野之息》我玩了上百个小时，游戏时间能在此之上的，也只有可以重复游玩的过程生成式游戏，和与人斗其乐无穷的竞技类游戏了。近年来这样的游戏充斥着业界，毕竟它们制作成本相对较低，又能换来玩家大量的游戏时间，在这个时间就是金钱的现代社会，谁都知道这意味着什么。而《旷野之息》这样的游戏就是消耗品了，纵然你对游戏世界怀有再多的爱与不舍，在几百个小时的游戏时间过后，也将不得不陷入“拔剑四顾心茫然”的境地。 曾经沧海难为水，除却巫山不是云。感谢任天堂，感谢世界，让我在最适合打游戏的时光里遇到了这样一款伟大的游戏。可是在经历完这南柯一梦以后，下一个能再唤醒我的热情，让我废寝忘食的游戏又需要等多久才会出现呢？而即使出现了又一个如此伟大的游戏，那个时候的我，过着日复一日机械生活的我，还能做到像现在这样抛开世俗的一切繁冗，忘情地享受这一切吗……","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"http://maliut.space/tags/游戏/"},{"name":"塞尔达传说","slug":"塞尔达传说","permalink":"http://maliut.space/tags/塞尔达传说/"}]},{"title":"Smalltalk 入门学习","slug":"smalltalk","date":"2017-10-05T12:00:00.000Z","updated":"2019-08-06T15:00:00.284Z","comments":true,"path":"2017/smalltalk/","link":"","permalink":"http://maliut.space/2017/smalltalk/","excerpt":"旧笔记补档，原来是为 2017-10-06 线下 MAP 活动做的笔记 参考资料： I Can Read C++ and Java But I Can’t Read Smalltalk Why I love smalltalk","text":"旧笔记补档，原来是为 2017-10-06 线下 MAP 活动做的笔记 参考资料： I Can Read C++ and Java But I Can’t Read Smalltalk Why I love smalltalk 基础语法 注释： &quot;this is comment&quot; 字符串：&#39;this is string&#39; 字符： $c 符号（Symbol）： #&#39;this is a symbol&#39; / #thisIsASymbolToo := 赋值语句 = 相等性 (equals) == 同一性 数组： #(1 2 3 4 5) 字符串连接： &#39;string1&#39;, &#39;string2&#39; 方法调用 关键词无处不在 在对象上调用方法，实际上是给这个对象发送一个消息 1234567t-&gt;rotate(a, v); // For C++t.rotate(a, v); // For Javat rotate(a, v); // 省略 dott rotate a, v; // 省略括号t rotate by a around v; // 语义化，但是分不清哪个是关键词哪个是参数t rotate by: a around: v; // 为分隔词增加一个冒号来区分t rotateBy: a around: v; // 干脆把方法名也省略了... This is smalltalk 如何在 Smalltalk 中定义一个方法： 1234rotateBy: angle around: vector | result | result := COMPUTE ANSWER. ^result 好处：方便理解、不需要记忆参数的个数、顺序（当然也要方法定义的好） rotateBy: 这种，以冒号结尾的，称为 keyword 但是如果是无参的方法，可以省略冒号 1t makeIdentity Smalltalk 里面可以有二元操作符，但是没有一元操作符（因为只有一元的 message，二维的话有 &amp;，| 之类的） 如下例： 12a negative | (b between: c and: d) ifTrue: [a := c negated] 相当于别的语言的： 123if (a &lt; 0 || (c &lt; b &amp;&amp; b &lt; d)) &#123; a = -c;&#125; 要点： Smalltalk 里不能写 a = -c ，因为没有一元操作符（-），但是可以写 -5，因为 -5 整体可以视为一个常量。 ifTrue: [a := c negated] 整体是一个 message，传递给 boolean 对象。 ifTrue: 是 keyword，后面是一个代码块参数。 运算的优先级顺序： 从左到右，无参消息 &gt; 二元 &gt; 关键词（keyword） 所以 1+2*3 = 9 因为 + 和 * 的优先级是同级的，从左到右计算。但是一般会写成 (1+2)*3 以避免误解。 句号和分号不像其他语言使用分号结尾， Smalltalk 使用句号结尾。例如： 12345| p | p := Client new. p name: 'Jack'. p age: 32. p address: 'Earth'. 但是 Smalltalk 里面也有分号，表示把消息发给上一个接收者，例如： 12345| p | p := Client new. p name: 'Jack'; age: 32; address: 'Earth'. 可以更加省略： 12345| p | p := Client new name: 'Jack'; age: 32; address: 'Earth'. 首先，new 作为一个消息发送给类 Client （这里可以看出类也是一个对象），返回一个 Client 类的对象。其次，这个对象被发送消息 name: ，参数是 ’Jack‘；随后分号表示舍弃掉返回值，接着把 age: 消息发送给上一个接收者。 最后 address: &#39;Earth&#39; 的结果被返回给 p 。一般来说一个 setter 方法会返回自己。（Smalltalk 方法必须有返回值） 集合123456789| a b | a := OrderedCollection new add: #red; add: #green; yourself. b := Dictionary new at: #red put: #rouge; at: #green put: #vert; yourself. Smalltalk 中 yourself 返回接收者，而 add: 和 at:put: 返回最后一个参数。 key 和 value 可以是任意类型。 集合的读取： 12a at: 1.b at: #red . 也可以通过迭代器进行遍历： 123456a do: [:item | USE item FOR SOMETHING]. b do: [:item | USE item FOR SOMETHING].c := clients select: [:client | client netWorth &gt; 500000]. d := clients collect: [:client | client name]. 代码块如何写个迭代器，遍历 Client 对象中的 name，age，address 属性？ Java 的做法：写个 ClientIterator 类，保存每次遍历到的状态。 Smalltalk 的做法：代码块，即匿名函数。 12345aClient partsDo: [:object | object printOn: Transcript]partsDo: aBlock aBlock value: self name. aBlock value: self age. aBlock value: self address. 如何理解？此处抽象 f(x) = print x ， partsDo 接受这个函数作为参数。运行的时候，相当于运行了 f(aClient.name) , f(aClient.age) , f(aClient.address) 而不用关心 f 函数具体的内容是什么。 另一个例子，对飞机上小于 12 岁的乘客做处理： 123anAirplane passengers do: [:person | person age &lt;= 12 ifTrue: [..DO SOMETHING with person..]] 可以更抽象出判断小于 12 岁的逻辑： 1234567kidsDo: aBlock self passengers do: [:person | person age &lt;= 12 ifTrue: [aBlock value: person]] anAirplane kidsDo: [:kid | ..DO SOMETHING with kid..]. 需要注意的点：在代码块里 return 会回到最上层。举例： 123456findAnySickKid \"Here, self is an Airplane too. \" self kidsDo: [:kid | kid isSick ifTrue: [^kid]]. ^nil \"None exists.” 类12345Object subclass: #MyClass instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pupeno' 实现 ifSmalltalk 中甚至不需要 if 关键字，因为我们可以自己实现。 首先，定义 true 和 false 123456789101112131415Object subclass: #PBoolean instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pupeno'PBoolean subclass: #PTrue instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pupeno'PBoolean subclass: #PFalse instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pupeno' 定义 equals 12equals: other ^ PTrue new 定义 ifTrue 1234567\"PTrue 中定义\"ifTrue: do else: notdo ^ do value \"PFalse 中定义\"ifTrue: notdo else: do ^ do value 最终效果： 1234567m1 := MyClass new.m2 := MyClass new.(m1 equals: m2) ifTrue: [ Transcript show: 'They are equal'] else: [ Transcript show: 'They are false'] 和 Ruby 中的后置 if 有异曲同工之妙。 总结Smalltalk 之所以看上去晦涩难懂，有很大一方面原因是它的符号与现代大多数编程语言不太一致。如果直接替换过来，就能好上很多。 另一方面，它追求纯粹的面向对象实现，真正的一切都是对象，交互都用发消息的形式体现，很多时候，对于习惯了现代编程语言的人们，也造成了一定的理解负担（谁能想到 if 还能这么实现）。稍作修改，便能受到人们的欢迎（Ruby）。 但 Smalltalk 是一门伟大的语言，它让你知道，原来代码还可以这么写，让你理解面向对象的本质。 C++ 和 Java 这种对面向对象的后天半吊子实现却占据了面向对象话语权的语言，对比之下就显得丑陋不堪了。 Smalltalk 还有着不分编译期和运行期这样的特性，不过现在对此体会也不是很深，就不多讲了。 写于 2018-08-02 凌晨","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"Smalltalk","slug":"Smalltalk","permalink":"http://maliut.space/tags/Smalltalk/"}]},{"title":"Update Log 20171005","slug":"update-log-20171005","date":"2017-10-05T11:43:00.000Z","updated":"2019-08-06T15:00:00.302Z","comments":true,"path":"2017/update-log-20171005/","link":"","permalink":"http://maliut.space/2017/update-log-20171005/","excerpt":"距离上次更新也快一年了。虽说有篇元编程的文章不过也是坑着，别的文章也是坑着。一年以来也发生了很多事情（主要还是进入职场了吧喂），不过其实一直没有忘记这里，只是自己懒罢了。","text":"距离上次更新也快一年了。虽说有篇元编程的文章不过也是坑着，别的文章也是坑着。一年以来也发生了很多事情（主要还是进入职场了吧喂），不过其实一直没有忘记这里，只是自己懒罢了。 于是趁着这次一时兴起，也对网站做了次大更新。契机应该是多说的倒闭（虽说也是很久之前了），然后网传规定说评论都要实名制，于是要将网站的评论系统迁移到 Disqus 。实际上呢更新了很多东西，在这里记录一下，也算是对自己的一次 restart 和激励好了。 主要做了三件事： 网站主题换用 Typescript 老的主题有些看厌了，选择了很久选中了这个主题，简洁而富有设计感。字体不再是微软雅黑了，依然很舒服。图片会有一个 114% 的放大，很适合图片的展示，甚至想把每篇文章配上一张美美的图。不过这样的话倒是有点像微信公众号了（笑）。 个人感觉，这个主题放些设计的东西是很漂亮啦，放些严肃的博文倒是感觉有点怪？不过好看就是正义啦。 114% 放大效果用来展示 UML 图倒是有点谜 23333 虽说 class=small-img 就可以取消掉。 为了配合这个主题没有个人展示的区域，新建了一个 about 页面，不过仍在施工中。另外配置了一下站内的搜索，为了构建成功还升级了一波 node 和 npm ，倒也是挺有趣的。 此外还对这个主题做了一些魔改： 略微放大了一下正文和 archive 页的字体。原来的字体实在小了些。 修改了底部社交网络链接的图标。主要增加了原来没有的 steam 图标，也顺便删了些用不到的。依旧使用 icomoon 的服务。 修改了头部的 logo ，毕竟是 blog 的名字不得不改。还好主题作者提供了原始的 psd 文件，少了很多工夫。名字变长以后， css 也要做出一定的修改。副作用是移动端上来看显得不太美观，不过先不管了。 原本使用的 adobe typekit 字体貌似要收费，于是干脆弃用之。 fallback 方案看着也还行， 如果有更好的字体欢迎推荐。同样，更换了字体以后也需要小改 css 。 对日期格式也做了修改。 评论系统换用 Disqus 。需要翻墙以后才能看到。 全站升级 https 。这里参考了这篇教程。旧文章里还有几张图片是 http 的，有空最好也做个替换。不过没有大碍，就先放进 TODO List 好了。是不是也抽空做个 favicon 呢？ emmm 很惭愧，就做了一些微小的工作，谢谢大家。","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://maliut.space/tags/个人/"}]},{"title":"JavaScript 元编程","slug":"javascript-metaprogramming","date":"2017-06-30T12:51:39.000Z","updated":"2019-08-06T15:00:00.274Z","comments":true,"path":"2017/javascript-metaprogramming/","link":"","permalink":"http://maliut.space/2017/javascript-metaprogramming/","excerpt":"最近阅读《Ruby 元编程》一书，拍案叫绝，又想到 JavaScript 语言和 Ruby 类似，相当灵活且具有一些元编程的特性，而且最近以及不久的将来都可能需要和 JavaScript 打交道，因此希望对照着这本书，探究些 JavaScript 元编程的特性。","text":"最近阅读《Ruby 元编程》一书，拍案叫绝，又想到 JavaScript 语言和 Ruby 类似，相当灵活且具有一些元编程的特性，而且最近以及不久的将来都可能需要和 JavaScript 打交道，因此希望对照着这本书，探究些 JavaScript 元编程的特性。 语言构件元编程是对语言构件的操作，因此为了了解元编程，需要先了解它们语言构件的异同。 在 Ruby 中，一切都是对象。一个对象则必然属于一个类。一个类是 Class 类的对象，而所有的类都是 Object 类的子类（严格来说是 BasicObject）。可以用一张图来展示： 在 JavaScript 中，一切依然是对象。但是它并不是基于类和继承构建的，而是基于独特的原型机制。JavaScript 的对象分为普通对象和函数。而函数除了普通调用以外，还可以通过 new 关键字调用，生成一个新的对象，而此时这个函数被称为构造函数。从形式上看，就像 Java 之类的用法。而每一个函数都会有一个 prototype 属性（除 Function.prototype），每一个对象都会有 __proto__ 属性指向它的 prototype 。当访问一个对象的属性时，先在这个对象自身上找，若没有则在 __proto__ 属性上寻找。这就是字面上“原型机制”的意义，即通过同一个构造函数构造的对象，都会表现得像这个构造函数的原型。 JavaScript 的原型机制很有趣但令人费解。这里也只是蜻蜓点水，详细的解释可以参考网上的各种文章和知乎问答。只是随着 JavaScript 的用途越发广泛，对于适应了主流语言的程序员来说，很难利用它的原型机制构建起可靠的大规模应用，因此不停地有各种将 JavaScript 类化的方案。一种比较常规的做法是，将构造函数作为类，对于各个对象的属性，定义在对象自身上；而对于各个对象共享的方法，定义在类的原型对象上。对于继承，由于类的原型对象也是一个普通的对象，将其 __proto__ 属性指向父类的原型对象，就可以继承父类的方法了。（讲的比较简略，读者可以自己推演下。另外，这并不是完美的做法，关于 JS 的继承衍生出不下五六种方法，感兴趣可以自行搜索） 面对程序员们的广泛需求，在最新的 es6 标准中引入了 class 语法糖，帮助程序员以他们熟悉的方式来编写代码。 class 的基本原理正是上述的方案（当然，总有各种细节上的注意点，具体请参考 es6 标准的解读）。模仿上面那张图可以得到： 首先 JavaScript 中并没有和 Ruby 意义类似的 Module。其次，Function 在很大程度上类似其他语言的 Class 概念。再次，我没有在图中列出 superclass 关系。如果按照 es6 的 extends 关键字，那么 superclass 一定指代正确的父类，而对于图中这三个顶层的类，若按照上文的逻辑来分析，则会显得有些奇怪。 姑且称图中的 Object、Function、MyClass 是顶层类。按照上文逻辑分析它们的 superclass，则都指向 Function.prototype，这是一个函数对象。而它的 superclass 指向 Object.prototype，这是一个普通对象。尽管一个普通对象不再是一个类了，但你仍然可以找到它的 __proto__ 属性指向 null。在网上也能找到继承这三个奇怪的东西的分析。扯得有点远了。由于我们希望对程序员隐藏 JavaScript 的原型机制，我个人并不希望将 Function.prototype 视作所有类的父类。尽管如此，你依然可以在 Function.prototype 中定义所有函数对象可以访问的属性/方法，在 Object.prototype 中定义所有对象可以访问的属性/方法。 元编程在上文中，我们实际上已经完成了第一步：将 JavaScript 类化。接下来，不妨按照《Ruby 元编程》中所列出的各种“法术”，寻求在 JavaScript 中的实现方法。 内省内省使对象可以在运行时查询关于自己的一些信息，例如对象的类，类的父类，对象拥有哪些属性和方法等等。我们知道 JavaScript 中的类就是一个对象的构造函数，正好 JavaScript 提供了 obj.constructor 属性来查询对象的构造函数。得到父类同样简单，根据继承的原理，一个类的父类正是这个类的原型的原型所在的类，即 class.prototype.__proto__.constuctor 。 至于对象身上的属性和方法， es6 提供了 Reflect 类来查询，其中很多方法来自于原先的 Object 类。将类命名为 Reflect 更好地体现了“反射”这一意图。 动态派发调用一个对象的方法，实际上是向这个对象发送一条消息。基于这个思想，Ruby 中可以使用 obj.send(&quot;method_name&quot;, args)，动态地调用一个方法。方法名可以使用字符串拼装出来，因此大大提高了代码的灵活性。而在 JavaScript 中，方法不过是对象的一个函数属性，而属性本身也可以用字符串表示，也就是说，动态派发在 JavaScript 的设计中，并不是什么高级的用法，仅仅是一种再自然不过的语言特性罢了。在 Javascript 中上述代码等价于 obj[&quot;method_name&quot;]()。 作用域绑定、define/delete、eval 和 new Function 不能做的要素：类宏 proxy能做的：methodmissing 一些感想","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://maliut.space/tags/Ruby/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://maliut.space/tags/JavaScript/"},{"name":"Metaprogramming","slug":"Metaprogramming","permalink":"http://maliut.space/tags/Metaprogramming/"}]},{"title":"关于密码管理的一个想法","slug":"thought-for-password-management","date":"2016-09-19T14:26:49.000Z","updated":"2019-08-06T15:00:00.295Z","comments":true,"path":"2016/thought-for-password-management/","link":"","permalink":"http://maliut.space/2016/thought-for-password-management/","excerpt":"密码的重要性毋庸多言，尤其是在当今人们越来越离不开互联网的情况之下。最近各种密码泄露事件层出不穷，社工技术也是比想象中厉害很多。虽说密码的原则，例如不要重复啊，要复杂啊，大家都知道，然而真正能做到的人也是少数，大多数仍然是偷懒几个密码走天下。然而这终究不是长久之计，因此一些密码管理工具诸如 1Password， LastPass 等开始流行起来。这类工具一般的做法是需要你设定一个主密码，进入后就可以查看各个网站的单独密码，也可以为你生成比较安全的密码，这样比较灵活。但它们仍然需要在本地保存各种密码（或许是用主密码作为 key 的对称加密？），并且会把这些信息加密后保存在网上。然而需要保存密码本身加之安全性全系于主密码一身，仍让人对其可靠性产生担忧。于是突发奇想，能否设计一套密码管理机制，使得我们并不需要保存每个密码，而是在需要时由其实时计算而出。","text":"密码的重要性毋庸多言，尤其是在当今人们越来越离不开互联网的情况之下。最近各种密码泄露事件层出不穷，社工技术也是比想象中厉害很多。虽说密码的原则，例如不要重复啊，要复杂啊，大家都知道，然而真正能做到的人也是少数，大多数仍然是偷懒几个密码走天下。然而这终究不是长久之计，因此一些密码管理工具诸如 1Password， LastPass 等开始流行起来。这类工具一般的做法是需要你设定一个主密码，进入后就可以查看各个网站的单独密码，也可以为你生成比较安全的密码，这样比较灵活。但它们仍然需要在本地保存各种密码（或许是用主密码作为 key 的对称加密？），并且会把这些信息加密后保存在网上。然而需要保存密码本身加之安全性全系于主密码一身，仍让人对其可靠性产生担忧。于是突发奇想，能否设计一套密码管理机制，使得我们并不需要保存每个密码，而是在需要时由其实时计算而出。 初步设想在这个机制中，用户输入一个自定义 key，得到一个输出，即计算出来的密码。密码计算出后可以自动复制到剪贴板，用户不需要知道密码的具体内容。 假设存在这样一个系统，那么它需要保证： 针对不同的网站，需要生成不同的密码。这个可以通过自定义 key 来保证。 对于同样的自定义 key，不同的用户得到的密码应当不同。否则 key 实质就成了密码。 这个机制不需要联网，也不需要本地存储各种密码。key 实质就是一个助记符，用户需要将它记在心中，但相比于各种复杂密码，记忆的难度已经大大降低。此外，它不应该被除主人外的其他人使用，否则其他人只要知道了主人的各个 key，也就相当于知道了密码。为此我们仍然需要一个主密码。不过和传统意义上的主密码不同，由于我们的机制并不记录密码或联网，我们并不能验证主密码的正确性，而是将主密码和自定义 key 共同组成算法的输入。这样他人即使知道了主人的 key，但因为不知道主密码，得到的输出也将是错误的。为此，虽然不是必需（因为主密码只是参与运算的一个普通字符串），我们仍然建议主密码足够复杂（例如包含数字、大小写字母、特殊符号且足够长）以至于难以猜测（因为自定义 key 为了方便记忆必然是容易被猜到的）。 让我们回到上文的第二点，因为同样的输入必然需要得到同样的输出，而算法本身并不能改变，除非你对每个用户都特殊定制一个软件。也不能使用什么元编程之类的手段，因为若不直接编译好，就等于公开了你的计算算法从而增加被破解的可能性。最简单的方法便是在用户第一次使用时产生一个随机数或者 UUID 加入输入。不过加入了主密码以后也就相当于解决了这个问题。然而主密码是用户自己选取的，仍然存在重复的可能，因此保险起见仍然可以加入随机数或者 UUID，将重复概率降低到约等于 0。 如何更换单个密码更换单个密码是一个常用功能，假如怀疑某个密码遭遇到泄露可以方便地重置它而不影响其他密码。目前我们使用主密码 + key + 一次生成的随机数来唯一确定一个密码。最简单的想法是用户修改自己的 key 就行。然而 key 作为助记符，若是频繁修改，也会给用户带来记忆上的困难。而修改主密码和随机数即意味着所有的密码都要进行修改，这显然是无法接受的。照道理应该通过修改随机数实现，但为了不影响其他密码，我们必须建立每个 key 和随机数之间的映射关系，即需要保存这些 key 和对应的随机数，而这却恰恰是设计之初想要极力避免的。 为此需要设计一个妥协的方案，目前的设想如下：生成一个随机数的表，这不得不保存为文件。另外将 key 和对应的随机数组合，通过非对称加密后保存为文件（可以进一步通过改变组合方式、加 salt 等增加安全性）。这样即使文件被他人得到也无法破译出 key 及对应关系。软件工作时也无从得知，而是需要穷举随机数表，加密后比对，才能确定该 key 对应了哪个随机数。此外，对于大多数密码而言，它们永远不会变化，即不需要使用新的随机数，也就不需要保存在文件中。对于一些特定的重要密码，用户也可以选择修改自己记忆中的 key 值，通过增加记忆成本来降低风险。 多端的数据一致性需要输入密码的场合，电脑端仍是大头，然而手机端也越来越需要了，为此需要开发手机上能用的版本。移植工作简单，但对于这样一个非联网的密码管理工具，如何才能保证电脑上和手机上得到的密码是一样的？自然主密码， key 和算法都是一样的，那么只需要保证随机数表相同。然而你不能要求用户来同步整个随机数表。容易想到，我们只需要系统生成一个 appkey，再由算法利用这个 appkey 生成整个随机数表即可。用户在一个新的端第一次使用时需要输入这个 appkey，这样问题解决。 软件升级理想状态下只要做出来就永远不会改变，然而信息技术的发展日新月异，也不能预测这个工具中使用的各种算法等是否需要更改。一旦更改则用户的全部密码都需要改变，而用户很难记起自己通过这一工具“保存”了多少密码。在此提个可行的解决方法：使用时双开前后两个版本，先用新版本得到的密码尝试，若错误则说明该网站的密码依然需要通过旧版本得到，此时用户应当及时修改密码为新版本。长此以往所有密码均被修改，版本过渡完成。 总结相比于目前常用的密码管理工具，本工具不联网，不保存，减少密码本身被简单泄露的危险。但也丢失了灵活性，即用户不能保存自定义的密码，而是只能用计算出来的密码。不过一般来说这都是更加安全的，既然选择使用密码管理工具，就应该有这样的安全意识。 这套机制中，用户需要记忆自己的主密码和各网站的 key。工具则需要提供一个随机的 appkey，以及三套算法：通过 appkey 可重复地生成随机数表、非对称加密验证 key 和随机数的对应关系、通过主密码 + key + 随机数可重复地计算出密码。 那么什么时候能做出来呢？待续……","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"密码","slug":"密码","permalink":"http://maliut.space/tags/密码/"}]},{"title":"Unity 使用多个 Android 插件与二次开发","slug":"unity-with-multiply-jars","date":"2016-03-16T11:51:05.000Z","updated":"2019-08-06T15:00:00.298Z","comments":true,"path":"2016/unity-with-multiply-jars/","link":"","permalink":"http://maliut.space/2016/unity-with-multiply-jars/","excerpt":"利用 Unity 开发 Android 应用时往往需要调用 Android 原生开发的方法，或是导出 Android 工程进行二次开发。单独一个问题很容易就能在互联网上找到答案，但当需要导入多个 Jar 包（ Android 原生方法通过打成 Jar 包在 Unity 工程中使用）、又需要导出 Android 工程继续开发时，就有可能遇到问题了。","text":"利用 Unity 开发 Android 应用时往往需要调用 Android 原生开发的方法，或是导出 Android 工程进行二次开发。单独一个问题很容易就能在互联网上找到答案，但当需要导入多个 Jar 包（ Android 原生方法通过打成 Jar 包在 Unity 工程中使用）、又需要导出 Android 工程继续开发时，就有可能遇到问题了。 本文记录了解决过程。想看结论及解决方案可以直接拉到最后。 本文所述的解决方案不具有普适性 场景场景来源于一个实际面对的任务，即在「使用高通 Vuforia 的 Unity 工程」中「调用 Android 方法（即引入新的 Jar 包）」，并「接入 KTPlay 的 SDK 」。由于 Vuforia 的 Unity SDK 本身就引入了 Jar 包，若引入新的 Jar 包，就会牵涉到如何修改共同的 XML 文件，如何处理和已有 Jar 包的关系等问题。而后者 KTPlay 的接入需要 Unity 工程导出 Android 工程继续开发。这本来并不会有问题，但事实上 Unity 使用了 Jar 包后进行二次开发的确会出现一些变化。当然这也是因为我半吊子水平，对 Unity 和 Android 开发都不够了解。不过总会有这样的时候，人也是这样过来的，网上难以轻易找到的东西，总归做个记录有利无弊。 使用第二个 Android 插件Unity 调用单个 Android 插件的方法其实网上都找得到，主要的思路是新建一个 Android 工程，在里面编写好方法后，打成 Jar 包放入 Unity 的插件文件夹中。然后利用 Unity 中的 AndroidJavaClass 来调用 Android 工程中的方法。但是在 Vuforia 工程中本身已经用到了 Android 插件，如果把新的内容覆盖进去，别的倒是没什么，但是 AndroidManifest.xml 文件却会被覆盖掉。这个文件是对 Android 应用很关键的配置文件， Vuforia 插件显然也用到了这个文件，将其覆盖掉明显是不行的。 于是我开始搜索网上的解决方案。一开始搜索的是如何在 Unity 中导入2个 Jar 包，但根本无法找到答案。倒是很多此类问题中提到了他们要解决的也是关于 Vuforia 工程导入 jar 包的问题，这启发了我，最后在 Vuforia 的官网文档中找到了官方撰写的教程。这对我也是一个启示，搜索问题时要先 specific 再 general 。 我的解决参考了 官方文档 和 这篇文章 （讲的是通常调用 1 个 Jar 包的情况）。两篇文章都挺好，就是由于作者和读者的思路问题在细节上理解容易出偏差，我是综合了两篇文章并自己试验后最终成功的。 具体可以顺着官方文档来，首先新建工程，但是注意新建工程的包名要与 Unity 工程导出 Android 应用时使用的包名一致，这会省很多麻烦。官方文档似乎没说明这一点。然后导入 Unity 和 Vuforia 相关的 Jar 包。注意 classes.jar 随 Unity 版本的变化，放置的位置也有区别，需要自己找一找。编写完以后需要导出 Jar 包，在工程属性中勾选 isLibrary 然后可在工程目录中找到自动生成的 Jar 包。然后把 Jar 包复制到 Unity 插件目录下，并修改 Unity 目录下 AndroidManifest.xml 文件中的主 Activity 名。（不能直接覆盖这个xml文件，因为 Vuforia 在里面也有些配置）。以上两步官方文档都说的很好，不过它用的是一个简单的 toast 的例子。实际我们开发时往往还会用到一些第三方的 Jar 包、 so 文件等，因此也要把这些文件也放入 Unity 插件目录对应位置下；使用这些东西导致的 AndroidManifest.xml 文件修改（如增加权限等）也需要在 Unity 目录下 AndroidManifest.xml 文件中对应修改。如果有素材变动啥的最好把 res 文件夹也复制过去。这里官方文档就说把 Jar 包放过去，可能是觉得这些都是常识性问题吧，我说的就比较细了，新手说不定觉得那些第三方的 Jar 和 so 都打包进自己的 Jar 了呢？（虽说看文件大小还是很容易判断的） 顺便一提，如果你自己的 Jar 用到了第三方的 Jar 包，那么做完导入 Unity 后那些第三方 Jar 包的地位和 Vuforia 的两个 Jjar 包目测是平等的。而我们在开发自己的 Jar 时并没有用到 Vuforia 那两个 Jar 包的东西，是不是说明如果我们不用 Vuforia 那两个 Jar 包里的东西，不导入那两个 Jar 包也没事？待测试。 还有，至于我说为什么没有普适性，因为我们是用自己的包名、主方法名取代了 AndroidManifest.xml 原来的相应内容，看来 Vuforia 的两个 Jar 包并不需要这两个东西。因此这两个 Jar 包和我们自己写的 Jar 包有很大的区别。虽然如此，应该不会有个第三方 Jar 包需要让你修改这些才能加进去吧…… 加入插件后的二次开发其实就是关于 KTPlay ，这个游戏内社区总的来说挺好用的。接入 Unity 的过程比较奇葩，首先要在 Unity 中做相关的配置，然后还要导出 Android 工程，在主 Activity 的 onStart 等一系列方法中加入相关的代码。其实也很简单，我试验的时候也很顺利，以至于当我把导入插件后的实际项目再拿去加入 KTPlay 却发现毫无反应时，大脑简直一片空白，连大概的可能性都猜不出。后来还是顿悟了，因为测试后发现不是 KTPlay 有问题，而是二次开发加入的相关代码根本没有被执行，然后就想到了，当之前加入 Android 插件后，这个应用的主方法已经不是那个 UnityActivity 了，而是自己编写的插件中的那个 Activity （由于之前更改了 AndroidManifest.xml ）。于是问题解决。 当然这样就十分有趣了，因为我编写插件在前，引入 KTPlay 在后，也就是说没引入 KTPlay 之前就加入了它的相关代码。当然这并不是一件坏事，事实上反而是一件好事，因为这样你可以直接在 Unity 中打包 apk 了，而不用再使用蛋疼的 Eclipse 。KTPlay 可以考虑下这样的用法啊。 总结对于此类需要在 Unity 中使用多个 Android 插件，并进行二次开发的问题，需要注意： 新建 Android 插件的工程时，确保包名与 Unity 导出 Android 的包名一致。 导入 classes.jar 和其他 Unity 插件工程下的 Jar 包和 so 文件。 事先观察需要二次开发的内容，把二次开发需要在主 Activity 中改动的地方事先改动好（主 Activity 就是你现在写的插件的 Activity）。 工程属性下勾选 isLibrary 导出 Jar 包。 把导出的 Jar 包和你开发插件过程中另外用到的第三方 jar 包和 so 文件复制到 Unity 工程的相关目录下。 res 文件夹也复制过去。 相应修改 AndroidManifest.xml （而不是粗暴覆盖原有的文件）。","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://maliut.space/tags/Unity/"},{"name":"Android","slug":"Android","permalink":"http://maliut.space/tags/Android/"},{"name":"Vuforia","slug":"Vuforia","permalink":"http://maliut.space/tags/Vuforia/"},{"name":"KTPlay","slug":"KTPlay","permalink":"http://maliut.space/tags/KTPlay/"}]},{"title":"Hello World Again and Again","slug":"hello-world-again-and-again","date":"2016-03-08T16:01:04.000Z","updated":"2019-08-06T15:00:00.265Z","comments":true,"path":"2016/hello-world-again-and-again/","link":"","permalink":"http://maliut.space/2016/hello-world-again-and-again/","excerpt":"终于在 Github 上开了静态博客。","text":"终于在 Github 上开了静态博客。 从知乎上看到然而找不到原文的大大曾经说过写博客的三个阶段，正好和我的经历完全吻合。曾经的百度空间，得益于百度，还有不少关键词排名靠前的文章，虽然现在看来都是些小学生烂文章罢了。其实还是挺怀念当时的心态，敢写，有自信，甚至将其当作一件很自豪的事情。虽然都是些垃圾文，然而随着百度空间的灰飞烟灭，现在就是想看也看不到了。还有那个益达，也许要不是现在在这里写这个，我已经将它永久遗忘了吧，还有我甚至也是有网友的人[破涕为笑]……别的零零碎碎也有不少吧，在当时那个博客流行的时代，随便啥网站都愿意配一个博客系统来留住用户。那个时候微博还没有被人听说，腾讯微博还叫滔滔，轻博客更是以后的事。而现在点点网早已时常抽风，只有宿舍二楼开水房墙上的告示贴纸还诉说着它曾经的辉煌。只剩下 Lofter 。 后来就是自搭博客的历程了，这得从我的建站经历说起。始于小学毕业的那个暑假从 5d6d 开始，后来的 Edicy ， Weebly ， Tap.cn ……还有好多我记不起来的名字，其中好多也都消失在了历史的长河里。虽然这些本质上和提供博客的服务并无太大不同，但对于习惯了博客的我，能建立一个论坛，一个主站，还是一个非常令人激动的事情。我也忘记了我是怎么进入虚拟主机的这个大坑，很早在 6R 的某个帖子下听说了 kilu.de 并觉得以后会有用便加入了收藏夹，而又在好久以后不明但又确定地觉得它就是我所听说的那个“虚拟主机”。然后看教程，搭 Discuz! ，虽然一片陌生却也尝试成功了，渐渐开始熟悉相关的流程和概念。 提到了 kilu.de 就又不得不说到 clistock 。虽然在 kilu.de 上做了很多尝试但 clistock 无疑是付出心血最大的一个，从搭建到选模板选图标选插件设置版块主站运营搞校网和贴吧然后还把走廊电脑的主页都设了一遍，虽然如今只剩下了 favicon.ico ，还有 QQ 每周一封啥都没有的数据分析邮件。还是要感谢当时的环保社还有后来的文学社我也不知道我怎么抱到的大腿总之作为圈外人士却也经历了很多事情。当时的自己还是 too naive 觉得能找到免费的资源是一件很了不起的事情然后用着那么慢的服务器，晦涩的域名，还有进入时的大幅广告，包括后来甚至被成为了危险网站。不知道那些素不相识的同学们为了提交一个三行诗还要来到这种可疑的地方忍受麻烦的服务的时候是一个什么心态，是新奇冲淡了疑惑还是心里鄙视了我好几十遍呢。不过对我来说那大概也是一段梦一般的时间吧，看着我熟悉的不熟悉的那么多人能够用上我的服务。不过有些事情，从一开始就是注定的，就像我即使用上了最好的服务也无法阻止论坛等在互联网上的整体式微。我的努力只不过是那个从 ASP 末期随各种论坛走来的一点情怀。想来这种情怀，从小六起，到了大学也没有消散。 的确，有些事情，从开始就注定了。比如遇到 6R ，比如进入 xs 的随机座位，比如决定推广 MAP ，比如我接触到独立博客。不知道什么时候接触的概念，但注定了以后迟早会成为其中的一员。实话说我根本不知道独立博客有什么用，明明基本功能都是那样，都能绑独立域名，论自由度，百度空间也能自己写 CSS ，即使独立博客你可以改源文件，大多数时候我们也只是选择一个既定的主题，不会自己费力修改。相反，走独立意味着你要选择一家靠谱的服务提供商，自己上传安装程序，设定数据库，即使静态空间也要搭各种环境，处理各种匪夷所思的问题。免费空间倒的倒，难用的更加难用，我最终还是意识到没有免费的午餐。这个时候付出的还有金钱成本。我想这只能用独立精神来解释。不像各种博客服务为了留住用户努力把自己变成一个大社区，独立博客让自己成为茫茫互联网海洋中的一个孤岛，而你就是这个孤岛完全的主人，即使是孤岛，即使岛很小。（当然也有些独立博客是朝着扩大知名度建立自己品牌的方向去努力运营的，那其实就是一个普通网站了） 真正开始认真建站也是在大学了，用的华夏名网的香港虚机+独立域名，各方面还是差强人意的。后来出了阿里云的云翼计划，说来也有趣，明明是针对学生的优惠计划，我却是在 RS 的广告里看到的。云翼计划实在是太优惠，价钱比虚机便宜，容量、带宽、网速却又远高。于是迅速买下一年。云主机其实就是个远程的只有命令行的 Linux ，自由度是大不少，适合经验人士。我嘛只能靠他给的自带 PHP+MySQL 环境加之少的可怜的 Linux 知识勉强搭上网站。懒得备案，因此也任由域名过期，通过 IP 访问。反正也写得不多。如果一切顺利的话我会就这样用到大学毕业然后再考虑搬去哪里，然而就在最近当我访问的时候却发现无法访问了。进后台看看，先跳出来的却是让我购买云盾服务的广告。然后我就看到主机被攻击。强行重启之后，数据库明显损坏了，我作为管理员也无法登录。真的很想以最大的恶意去揣测阿里云。总之寻找下一个落脚之处就显得非常迫切了，然后这段时间频繁看到 Hexo ，就尝试了。其实以前也不是没有过搞静态的想法，不过那时没搞成功 Jekyll ，就搁置了。这大概也算是机缘巧合吧，总之现在我还是很喜欢这个 blog 的，小规模的用静态也是正好，除了没有用户管理都能够用。 行文万里，不知所云，看到这里的都是真爱。也是突然想到，时下流行的人工智能、深度学习等等，将大数据用于分析以形成总体意义上的统计学规律。然而对于我们个体而言，我们毕竟独一无二，我们也有必要独一无二。 愿独立精神长存。 “好巧，我也不讨厌这样的自己。”","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://maliut.space/tags/个人/"}]},{"title":"CSAPP:Bufbomb","slug":"csapp-bufbomb","date":"2015-07-31T16:00:00.000Z","updated":"2019-08-06T15:00:00.261Z","comments":true,"path":"2015/csapp-bufbomb/","link":"","permalink":"http://maliut.space/2015/csapp-bufbomb/","excerpt":"from wordpress, 放 tietuku 的图都挂光了 关于 CSAPP 的各个经典的 Lab ，网上的解答已是一搜一大堆。本文的目的是记录自己亲身做完后的一些感悟，不过多探讨具体的做法，而是归纳一些平时看书不太注意的，而需要在 Lab 里理解透彻的地方，和做 Lab 时需要默认知道的一些信息和经验，以便少走弯路。在此基础上略谈各题做法。","text":"from wordpress, 放 tietuku 的图都挂光了 关于 CSAPP 的各个经典的 Lab ，网上的解答已是一搜一大堆。本文的目的是记录自己亲身做完后的一些感悟，不过多探讨具体的做法，而是归纳一些平时看书不太注意的，而需要在 Lab 里理解透彻的地方，和做 Lab 时需要默认知道的一些信息和经验，以便少走弯路。在此基础上略谈各题做法。 我的解题主要参考了这篇文章，尽管网上有许多解答，但这篇图文并茂的博文给我带来的帮助显然是最大的，此外还有这篇文章，通过对比两篇文章，我才能更好理解最后一题。在此表示感谢。 在我看来，这个 Lab 的主要目的在于，使你对栈帧的结构、调用过程中的寄存器变化（%esp,%ebp,%eax）有更加深刻的了解。在这个 Lab 里你必须要对 leave 和 ret 指令的具体操作有了解，而不能仅仅像上一个 Lab:Binarybomb 那样，仅仅将它们抽象为回到调用过程前的状态。因为通过缓冲区溢出，你已经破坏了原来的栈帧结构。 关于解题，你需要知道的一些知识： 栈帧结构 当调用一个过程后，栈帧结构如下所示 1234567......传入参数2传入参数1返回地址旧的 %ebp......栈顶 其中 %ebp 指向旧的 %ebp ， %esp 指向栈顶 本 Lab 中输入字符串的保存位置和合法的字符串最大长度 getbuf 函数的代码如下（图挂） 其中调用了 Gets 读取输入，但这个大概和系统函数差不多，就不深究了。观察之前系统为这个函数分配了 0x38 的空间，但这并不代表字符串允许长度为 0x38 。下一行的 lea 指令计算了 %ebp-0x28 的值。这里先验地说明，这个值，即旧的 %ebp 往下 0x28 的空间里，才是存储字符串的地方。如果字符串超出了这个限制，则会继续向上覆盖旧的 %ebp ，返回地址，etc。同时这也说明真正合法字符串的长度并不是 PDF 给的代码中规定的值。 0x28 即十进制 40 说明最多 40 个字节，那么 41-44 字节就覆盖了旧的 %ebp ， 45-48 字节覆盖了返回地址。最后一题的 getbufn 也是同理（开始做的时候直接以为是 512 但其实是 520 所以被坑死）。那么如何查看输入的字符串？以使用 GDB 为例，在 0x804940d 设下断点，在此处可以查看 %ebp 的值，其减去 0x28 即字符串的起始地址。也可直接查看 %eax ，先验认为从 Get 返回后， %eax 即保存了返回值的地址。查看时要注意代码为p (char *) %eax，因为 %eax 的值已经是字符串的地址，不能再在 %eax 前加 * 。 leave 和 ret 指令 ret 指令前必须要 leave ，否则无法完全恢复调用前的状态，但也可以自己手动模拟这两个指令的效果。leave 指令等价于： 12345movl %ebp, %esp # %esp 指向 %ebp 指向的位置，即旧的 %ebp # 由于 %esp 就是栈顶指针， pop 和 push 都相对与这个操作， # 所以相当于 %esp 下面的东西都没了popl %ebp # 注意 %esp 指向旧的 %ebp ，所以将 %ebp 恢复为旧的 %ebp # 同时 %esp+4，指向返回地址 ret 指令的效果为从栈中弹出一个地址，并跳转到这个地址因为此时 %esp 指向返回地址，因此程序跳转到返回地址，此时 %esp 继续 +4 ，指向返回地址的上一个 利用 ret 的性质，本 Lab 中后几题都要用到一个技巧，在这些题中我们要自己输入汇编代码，再修改 getbuf 的返回地址，让程序执行我们输入的代码，然后再 ret 到别的函数中。但先让程序跳转到我们输入的地方已经使栈帧结构荡然无存，如何再让其 ret 到一个特定位置？使用如下代码： 12push $0xabcdefgret 这段代码使程序 ret 到地址 0xabcdefg 处。知道了 ret 的具体效果，应该不难理解它的原理。 小端法 这只是一个小提醒了，直接输入地址作为 char 时要反一下，但如果是通过反编译生成的 char 就不用了，因为编译时系统已自动生成。看一下反编译出来的 asm 文件就能明白。 下面开始题目相关： Level 0：Candle要求执行完 getbuf 后跳转到 smoke 中，只要覆盖掉返回地址就可以，把原来的返回地址改为 smoke 函数的起始地址，本机上是 0x08048c8c ，这样答案可写成12345600 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 0000 00 00 008c 8c 04 08 前面 40 个是正常存储的字节，后 4 个是旧的 %ebp 区域，最后 4 个就是返回地址。前面 00 只要是除了 ’n’ 任意均可，最后写成 smoke 起始地址的反序。 Level 1： Sparkler跳转到 fizz 中，但是这时要把你的 cookie 作为参数传进去。第一感觉参数放在返回地址上面，但实际上却不是。 ret 完事后 %esp 指向返回地址上面一个地址，然后执行 fizz 时，先 push 了 %ebp ，此时 %esp-4 ，即原来保存返回地址的地方，然后 mov 指令将 %ebp 也指向 %esp 指向的地方，再取了 %ebp+8 指向的值作为参数，所以参数应该保存在这个位置，即返回地址向上 2 格的位置处！ （图挂） 至于为什么和常识不一样，是因为我们篡改了 getbuf 的返回地址运行 fizz ，而没有 call fizz ，因此没有另保存一个返回地址，导致了偏差。 答案与上题类似，不专门给出，可以自行推算或查看我开头给的两个别人的博客。 Level 2： Firecracker跳转到 bang 中，但是需要更改一个全局变量。先验地知道全局变量存在程序中一个固定的地址处。 查看 bang 中比较两数的代码： （图挂） 不难发现 0x804d2a0 和 0x804d298 中存着全局变量和 cookie ，通过 GDB 调试进一步确定各自保存的东西（我在图中已经标出，另，据说也可通过 objdump -D 查看，此处不提）。知道了全局变量的保存地址，接下来就是自己构造代码了。思路如下：让代码以字符串的形式输入，然后修改 getbuf 的返回地址为保存的字符串的起始位置，使程序执行这些代码，然后 ret 到 bang 中。我们需要手写汇编代码，然后使用 gcc 编译后再利用 objdump 反编译得到对应的 char 。代码如下： 123movl $0xcookie, 0x804d2a0 # 把你的 cookie 放入全局变量，不用反序push $0x8048d08 # 让这段代码执行完后返回 bang 函数ret # 如果看不懂，复习本文之前的内容 反编译得到 char 后任意填充到 40 字节，再任意 4 字节覆盖旧的 %ebp ，最后 4 字节写为保存字符串的起始地址即可。具体的就不再给出了。 Level 3：Dynamite需要使 getbuf 返回 cookie 而不是 1 。返回值保存在 %eax 中，只需要使 getbuf 先返回到我们输入的代码处，替换掉 %eax 后再返回原来的 test 中即可。但是我们想让电脑以为什么错误都没发生，而之前的代码都把旧的 %ebp 覆盖掉了，这次不能覆盖它。（可以手工推一下，因为之前都是跳转到别的函数然后退出程序，这次返回到 test 中，而 test 是 getbuf 真正的调用者，返回后 %ebp 要读自己指向的内容即旧的 %ebp 才能恢复 test 的栈帧，若被覆盖则不能还原）因此这题的答案要注意两点。一是手工编写的汇编代码： 123movl $0xcookie, %eax # 把 %eax 改为你的cookiepush $0x8048d75 # 返回地址设为 test 中 call&lt;getbuf&gt; 的下一条，即正常状态下的返回地址ret 二是要先用 GDB 调试读出旧的 %ebp 的值，其地址即为此刻 %ebp 的值。然后要用这个值反序写在答案中覆盖旧的 %ebp 的部分。 Level 4：Nitroglycerin运行一次程序，会提示你输入 5 次字符串，要求每次的字符串都要相等，但 5 次字符串保存的位置不一样。其余要求同上一题。同样面临两个问题。一是无法得知 getbufn 的返回地址应该设在哪里，因不知道每次字符串的保存位置。解决方法是用 nop 指令，至于为什么，可以参考文首给出的两篇博客，我虽可理解但也未必讲得出所以然。只想说注意跳转的位置指向 5 次随机数的最高处。这个静下心来想一想可以想清楚。还有就是不知道 %ebp 要恢复成哪一个值，解决方法是依靠其与 %esp 的数量关系，那两篇博客也讲得很好了，此处不提。","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"CSAPP","slug":"CSAPP","permalink":"http://maliut.space/tags/CSAPP/"}]},{"title":"解决 JSP 与 MySQL 下各种中文乱码问题","slug":"jsp-mysql-deal-messy-code","date":"2015-05-21T16:00:00.000Z","updated":"2019-08-06T15:00:00.279Z","comments":true,"path":"2015/jsp-mysql-deal-messy-code/","link":"","permalink":"http://maliut.space/2015/jsp-mysql-deal-messy-code/","excerpt":"近来 Web 课需要处理 JSP、MySQL 前台后台各种，不可避免地遇到了乱码问题。经过无数折腾以后终于（算是）解决，遂将经验总结如下： 本文记录了解决过程。想看结论及解决方案可以直接拉到最后。","text":"近来 Web 课需要处理 JSP、MySQL 前台后台各种，不可避免地遇到了乱码问题。经过无数折腾以后终于（算是）解决，遂将经验总结如下： 本文记录了解决过程。想看结论及解决方案可以直接拉到最后。 Lab7 中已经遇到了连接数据库乱码的问题，当时的情况是： MySQL 默认安装的编码是 Latin1（ISO8859-1）Eclipse 默认编码是 GBK ，后改为 UTF-8 当时的现象：MySQL 使用 UTF-8 建的数据库 1DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci 在命令行中可以正常输入中文并在命令行中显示，但是从 Java 中读取而且从 Java 中插入数据库的中文会乱码。 当时的解决方法：读取时： 123456789String sql = \"SELECT * FROM user\";Statement stm = connection.createStatement();ResultSet rs = stm.executeQuery(sql);while (rs.next()) &#123; String isbn = rs.getString(\"Name\"); String bookName = rs.getString(\"Username\"); bookName = new String(bookName.getBytes(\"iso8859-1\"), \"gbk\"); System.out.println(bookName + \":\" + isbn);&#125; 写入时： 12345String sql = String.format(\"INSERT INTO ISBN_LIST (ISBN, BOOK_NAME) VALUES ('%s' , '%s');\", isbn, bookName);sql = new String(sql.getBytes(\"gbk\"), \"iso8859-1\");Statement stm = connection.createStatement();int row = stm.executeUpdate(sql);System.out.println(\"ok,\" + row + \"row(s) affected\"); 为什么要转字符而且和 UTF-8 完全无关？不明！（ PS ：后来了解到 MySQL 变量因此转 ISO8859-1 应该是这方面的原因，但是 GBK 为什么有仍然不明） 后来的探索：因写 Lab 时中文是从 Eclipse 中打进去的，而 Project 的中文是从表单中用户输入获得的，上文的方法依旧导致乱码。（ PS ：后来意识到中文从前台传到后台还没写入数据库就已经乱码，因此如果再转一次可能可以解决，但已经没办法回去试了，而且这样也不是长久之计，因为 MySQL 本身设置有问题） 网上查询各种方法未果。因为数据库建成时已经指定了 UTF-8 ，因此网上说的临时改字符集的方法都是没有用的。网上某处看到 show variables like &#39;character_set_%&#39;;查看 MySQL 的环境变量，发现除了指定了 database 是 UTF-8 ，其他有好多 Latin1 ，通过 SET character_set_database = utf8; 之类的方法全改成 UTF-8 并若干次重开 MySQL 服务（伴随删除数据表再新建）后发现重启 MySQL 后仍然还原成默认设置。也通过修改 my.ini 尝试过，但是仍有两项为 Latin1这时候我认为把所有的改成 UTF-8 可以解决问题，因此在这种思路下在网上找到了真正的永久修改的方法：在 MySQL 安装目录下 bin 下找到 MYSQLInstanceConfig.exe 重新配置安装选项，在选择编码时选择 UTF-8 ，这样成功将所有环境变量变成 UTF-8 。（ PS ：这样也解决了 mysqldump 导出后中文乱码的问题） 然而仍然不成功，而且发现这时候在命令行下也无法输入中文的值了。因为之前也看到过命令行的默认编码是 GBK ，会影响中文的显示（但是试过改成 UTF-8 结果出了一堆窗口上的变化导致不敢乱试而且觉得并不是主要），因此使用 SET NAMES &#39;GBK&#39; ，这样可以在命令行显示中文了，但在命令行看并没有什么用，最终还是要解决 JSP 下获取的问题. 寄希望于能在 JSP 下正常得到，新建了一个 servlet 用来在网页中输出当前数据库的各条记录，使用本文开头 Lab 里所用的转换编码的方法多次尝试，但发现一点用处没有。这使我将目光转向生成 SQL 语句时的编码。生成 SQL 语句后同样按照本文开头 Lab 中的方法对其自身转换编码，虽然回回得到的还是乱码，但是乱码的形式在改变，证明这里可以起作用，或许只要找到正确的转换即可解决。这个时候我注意到之前插的一句调试语句：输出从前台得到的 name 的值，如果从前台得到的就是乱码，那么插进去肯定还是乱码（我也真是迟钝明明之前已经放了这个语句然而写完居然忘记了又去试验别的方法）发现果然这个值得到的时候就已经是乱码了，观察乱码的形式感觉像是西欧文字，因此将转换的语句写为 1sql = new String(sql.getBytes(\"iso8859-1\"), \"utf8\"); 果然可以正常显示中文了，我认为至此得到了使用上的解决以前因为网页啊 Eclipse 啊都是 UTF-8 因此前一个编码认为应该是 UTF-8 ，但是后面不管怎么试都没用。这样确定了前面是西欧文字后，因为 MySQL 等都被我改成了 UTF-8 ，后面自然就觉得是 UTF-8但是，为什么从前台得到的中文是西欧文字，并不知道 另：此时重开 MySQL 命令行，因为没有设置 SET NAMES ‘GBK’ ，所以在 MySQL 中显示中文变了乱码，但是既然 JSP 得到是正常了，我认为命令行中 SET NAMES ‘GBK’ ，或者把命令行编码改成 UTF-8 应该能显示正常。（ PS: 的确如此） // 一天过去了 5.22昨天只解决了 name 字段的中文乱码问题，而 name 字段只是一个普通的字段。今天当测试 username 字段为中文时出现了其他的问题。username 字段需要用在登录页面中进行 SQL 查询，而且需要保存在 cookie 中首先登录时使用中文名字果然无法登录，提示用户名或密码错误，结合昨天的经验容易想到在登录验证的 SQL 查询语句后增加 1sql = new String(sql.getBytes(\"iso8859-1\"), \"utf8\"); 然而并没有什么用（事实上是可以的，只是 Eclipse 的默认浏览器出了问题） 又想到使用 Ajax 进行实时检测时也要进行 SQL 查询，试验后发现对于中文名字重复无法正常提示用户名已被占用，怀疑是编码的问题但是无论怎么改都没用，而后调试输出发现并没有什么问题，最后去掉了改编码的代码，在 chrome 下可以正常提示，网上的说法是 Ajax 是默认用 UTF-8 传值的，看来这个问题已经得到了解决PS：此时 Eclipse 默认浏览器还是错误的。这个浏览器真是害人不浅，浪费了我大量时间，现在已经把运行的默认浏览器改成了 chrome ，只不过无法通过 system.out.println 方便调试了（更正：可以调试）。知道了 Eclipse 浏览器的问题，换用 chrome ，登录问题也可以得到解决. 此外我还探索了为什么前台后台传值使用 ISO8859-1 的问题，网上有说法说要改 Tomcat 的 server.xml 文件。我在安装目录和 Eclipse 的 project explorer 下的 Tomcat 都做了修改然而并没有什么用。或许是我没改对吧。不过更多的地方说更改这个文件并不是什么好方法，因为实际情况下有时不能改变服务器配置。因此作罢。 随后是 cookie 存中文的问题，存中文会报错说有控制字符。这其实是一个小问题了，查阅网上资料后得知只要 URLEncoder.encode(username, &quot;UTF-8&quot;) 即可，这时候中文变成 %C3%A5%C2%95%C2%8A%C3%A5%C2%95%C2%8A%C3%A5%C2%95%C2%8A 这样的形式，可以正常存储了，但是在读取时却出了问题。首先是 JS 读取 cookies 问题，用于在主页显示当前登录用户的用户名。然而用 JS 读出来并解码后发现还是乱码，西欧字符。经过检查， JS 读取 cookies 的内容是没问题的，就是之前存入的 cookies 的内容，这样问题就很明显了。因为从前台到后台得到的中文本来就是西欧字符，为了方便起见我在构成 SQL 查询字符串后进行了转码，这样不用单独对每一个得到的有可能是中文的前台表单元素在后台获得时就挨个进行转码。但是这样的话在存进 cookies 时所用来编码的 username 仍然是西欧字符的 username 。因此，在保存 cookies 时先将 username 转码再 encode 存储即可。注意： JS 解码时应使用 decodeURI 函数而不是 unescape 函数，后者仍然使用西欧编码解码。注意：这样 SQL 和 cookie 处都有需要解码的地方，感觉看起来略杂乱，觉得还是不能偷懒，在获得前台表单值时就应立即转码。 接下来是 servlet(JSP) 读取 cookies 问题，用于访问主页时根据 cookies 中是否有值判断应跳转至主页还是登录页面。既然前面已经将 cookies 正确储存了，这里就没什么问题了，直接在得到 cookies 以后 URLDecoder.decode(cUsername,&quot;UTF-8&quot;) 即可。注意：这里的 SQL 查询构建 SQL 语句后就不用从西欧转到 UTF-8 了，因为这里有可能是中文的字段并不是从前台得到，而是从 cookie 中格式正确的中文得到。 结论为了消灭乱码，请如下操作： 一次性操作： 将 Eclipse 默认编码设置为 UTF-8 在 MySQL 安装目录下 bin 下找到 MYSQLInstanceConfig.exe 重新配置安装选项，在选择编码时选择 UTF-8（这样也不需要在每次建库时用长长一串指定 UTF-8 了） （补充）Eclipse：Window =&gt; Preference =&gt; Web=&gt; Jsp file下也改编码为 UTF-8 ，这个值不随 Eclipse 默认值改变，如果不改的话每次新建 Jsp 还要手动把三处 ISO8859-1 改成 UTF-8 编程时需要注意的： 后台接收前台传来的值时，如果值有可能是中文，接收完立即调用 str = new String(str.getBytes(&quot;iso8859-1&quot;), &quot;utf8&quot;)转码（立即调用：这样进行 SQL 查询和存 cookie 时都不用额外转码）（5.23 PS：按 ltl 同学的方法，在接收值之前加上request.setCharacterEncoding(&quot;UTF-8&quot;)可以解决这个问题，照原理来看应该也是可以的，然而我之前试验过没有成功，可能是那时候 Eclipse 自带浏览器的问题，待试验。如果这个证明可行，那么这一点可以和“其他”下的第 2 点归结为同一点，即后台 servlet 的 doGet 和 doPost 在开始写代码前都要把 request 和 response 的编码设一遍。） 中文存进 cookies 时对可能为中文的字段需额外编码， URLEncoder.encode(str,&quot;UTF-8&quot;)使用 Java 读取时使用 URLDecoder.decode(str, ”UTF-8″) 解码。使用 JS 读取时使用 decodeURI(str)解码 以上步骤正确，那么 Ajax 不需要额外操作 其他： Eclipse 自带浏览器难以信任，请使用外部浏览器测试。（然而 chrome 多次测试后也出现了不正常的现象，可能需要休息一会？） 关于在 servlet 中使用 out.print 输出引起乱码的问题： 1234request.setCharacterEncoding(\"UTF-8\");response.setContentType(\"text/html\");response.setCharacterEncoding(\"UTF-8\");PrintWriter out = response.getWriter();","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://maliut.space/tags/Java/"},{"name":"JSP","slug":"JSP","permalink":"http://maliut.space/tags/JSP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://maliut.space/tags/MySQL/"}]},{"title":"Java 使用 Gson 操作 JSON 数据","slug":"java-use-gson","date":"2014-12-11T16:00:00.000Z","updated":"2019-08-06T15:00:00.269Z","comments":true,"path":"2014/java-use-gson/","link":"","permalink":"http://maliut.space/2014/java-use-gson/","excerpt":"Lab8 需要操作 JSON 格式。毕竟用处广泛，而 Java 中有许多包可以用于操作 JSON （参见：http://www.json.org/） 起初使用 org.json ，但是将对象保存为 JSON 时似乎需要将对象的每个属性都手工写入，而我的设想是自动探测对象的所有属性并写为 JSON （毕竟重复劳动）。遍寻网络无果，后来在某个角落发现 Gson 似乎可以实现。遂用之，发现功能强大。","text":"Lab8 需要操作 JSON 格式。毕竟用处广泛，而 Java 中有许多包可以用于操作 JSON （参见：http://www.json.org/） 起初使用 org.json ，但是将对象保存为 JSON 时似乎需要将对象的每个属性都手工写入，而我的设想是自动探测对象的所有属性并写为 JSON （毕竟重复劳动）。遍寻网络无果，后来在某个角落发现 Gson 似乎可以实现。遂用之，发现功能强大。 生成 JSON需要生成 JSON 的数据类： 12345678910public class Player &#123; private String name; private int deposit; public Player(String name, int deposit) &#123; this.name = name; this.deposit = deposit; &#125;&#125; 用于生成的代码： 123456789import com.google.gson.Gson;Player players = new Player[2];for (int i = 0; i &lt; 2; i++) &#123; players[i] = new Player(\"name\", i);&#125;Gson gson = new Gson(); // create Gson objectString str = gson.toJson(players); 注：生成 Gson 对象除了用 new Gson() 外还有一种据说更高端的方法，反正我也不知道用处和区别就不写了 toJson 方法后的参数可以为对象，也可以为对象数组。都可以生成符合规范的 JSON 格式 读取 JSON以从 OpenWeatherMap 的 API 返回的 JSON 为例（查询天气：http://api.openweathermap.org/data/2.5/weather?q=London，各参数可参考 http://openweathermap.org/weather-data#current） 1234567891011&#123;\"id\":88319,\"dt\":1345284000,\"name\":\"Benghazi\", \"coord\":&#123;\"lat\":32.12,\"lon\":20.07&#125;, \"main\":&#123;\"temp\":306.15,\"pressure\":1013,\"humidity\":44,\"temp_min\":306,\"temp_max\":306&#125;, \"wind\":&#123;\"speed\":1,\"deg\":-7&#125;, \"weather\":[ &#123;\"id\":520,\"main\":\"rain\",\"description\":\"light intensity shower rain\",\"icon\":\"09d\"&#125;, &#123;\"id\":500,\"main\":\"rain\",\"description\":\"light rain\",\"icon\":\"10d\"&#125;, &#123;\"id\":701,\"main\":\"mist\",\"description\":\"mist\",\"icon\":\"50d\"&#125; ], \"clouds\":&#123;\"all\":90&#125;, \"rain\":&#123;\"3h\":3&#125;&#125; 这是一个复杂的 JSON 数据，为了读取需要先根据数据生成特定的类结构。结构如下： 1234567891011121314public class WeatherState &#123; public Main main; public List&lt;Weather&gt; weather; public int id; public static class Main &#123; public double temp, temp_min, temp_max; &#125; public static class Weather &#123; public int id; &#125;&#125; 注： 类名随意 变量名需要严格符合 JSON 中的内容 内部类需要 static ，这里使用内部类看起来更加清晰，用继承也可以 变量 private + get/set 方法应该也可以，图方便用 public 不需要把 JSON 中所有的数据都建构出来，你建了多少就会读出来多少（这一点非常好啊） 用于读取的代码 1234567String jsonWeather = /* 前面的 Json 数据 */;Gson gson = new Gson(); // create gson objectWeatherState w = gson.fromJson(jsonWeather, WeatherState.class);System.out.println(w.id);System.out.println(w.main.temp);System.out.println(w.weather.get(0).id); 以上即为 Gson 的基本用法","categories":[{"name":"技术","slug":"tech","permalink":"http://maliut.space/categories/tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://maliut.space/tags/Java/"},{"name":"JSON","slug":"JSON","permalink":"http://maliut.space/tags/JSON/"},{"name":"Gson","slug":"Gson","permalink":"http://maliut.space/tags/Gson/"}]},{"title":"游戏的艺术性","slug":"the-art-of-game","date":"2014-12-07T16:00:00.000Z","updated":"2019-08-06T15:00:00.291Z","comments":true,"path":"2014/the-art-of-game/","link":"","permalink":"http://maliut.space/2014/the-art-of-game/","excerpt":"这篇文章需要重写 2018.08.02 首先我坚信游戏是一门艺术。 但是游戏之所以成其为艺术，必有其独特之处。","text":"这篇文章需要重写 2018.08.02 首先我坚信游戏是一门艺术。 但是游戏之所以成其为艺术，必有其独特之处。 关于游戏的艺术性，我前后也看了不少他人的观点，接触了不少思想（关于何谓游戏，何谓艺术，以及游戏的艺术性本身），观点也有一个发展的过程。 现在我的基本观点如下：游戏的艺术性，最重要的在于交互性，这是游戏特有的。（在这里，交互性的定义不应该太过于广泛，比如你被动的看然后心里产生思想，但是并不影响你被看的事物） 一般我们说游戏很有艺术感，往往是指游戏的音乐啊美术啊之类，这些只不过是音乐艺术，美术艺术用在游戏中，不能将其称为游戏艺术。但是它们也不是独立的，它们用在游戏中，帮助展现了游戏的交互性，因此已经不是纯粹的音乐和美术艺术了。因此它们也是游戏艺术不可分割的一部分。 交互性所带来的为什么游戏仅仅多了交互性就能显得如此种类丰富且让人入迷呢？交互性使得表现形式的多样性大大增加，而更为关键的是给了玩家代入感。其他的所有艺术形式，观众永远只能位于观赏者的地位，即使与作品产生共情，也难以改变作品本身。而对于玩家而言，每一位玩家的游戏过程，都是一个不同的故事（不考虑某些特殊、极端情况，下文不加说明时同）。而为了配合这份交互性，很多游戏都是由一个主角作为世界中的观察者，而不是全局视角。这就让玩家真切地感受到自己是这个世界的一份子，而不是世界的旁观者。不可否认人总是关注自己比关注别人更多一点。 有人认为游戏的交互性让玩家可以改变世界，这说法没有错，但其实不严谨。改变世界只是交互性可以带来的结果之一，但即使并没有改变世界，玩家的输入能够得到反馈，也让玩家有能够改变世界的错觉，甚至在有些游戏中玩家知道不能改变世界，但仍喜欢着交互性本身，这些玩家会对诸如打击感之类的有很高的要求。有些高自由度的游戏像 minecraft ，玩家可以随意改变世界，而 RPG 这种游戏类型，尤其是那些单线的 RPG ，玩家能够操作的仅仅是走路、打怪等，这只是给了玩家自由度的错觉，而结局早已确定。而 never alone 这种游戏（ps：写到这里我正在下载这个游戏，我不确定这里是否合适，这里只是用其指代我心目中的一类理想游戏），交互性的引入根本不是追求改变世界，而是为了提供一种体验。顺带一提，正如果文字教程的效果不如视频教程，而视频教程又不如亲自动手实践，这样的交互性正是未来实现教育游戏化的重要手段。（大蛋糕啊） 游戏的定义游戏的定义是什么？现在我们所说的游戏，颇有点折衷的感觉。要从词语本身来看，游戏就是跟干正事相对的娱乐活动。然而，现在越来越多的游戏不再追求娱乐，而是给人以震撼、感动或是启示等。毕竟在古代小说戏剧什么也不过是娱乐而已，这是游戏词义的正常变化。如果从交互来看，我们和现实世界进行着远远更加频繁和真实的交互，这也是为什么很多人说一切都是游戏。这也是完全正确的，毕竟现实就是个垃圾游戏（当然从这里也有很多可以说，比如为什么人们更愿意沉迷游戏等，不过现在不想扯了，而且已经有很多人扯的很好了）。当然大部分人的直觉当然是把发生在虚拟中的才叫做游戏，但是随着增强现实的兴起，这一划分界限也在慢慢模糊。比如我带着 Google Glass 玩 Ingress 或者玩体感的 Kinect 算什么？ 游戏和体育的界限也很模糊。本来体育也不过是一些原始的工作（狩猎活动）和游戏活动（篮球etc）而已，只不过后来为了追求更高更快更强而逐渐专业化走上了一条不归路（大误）。现在电子竞技也成为体育运动了。其实这类竞技运动和别的游戏也挺好区分的，前者主要是一局一局的有着一个或几个对手的竞技活动。 66rpg 的某次短篇比赛就曾举例将单纯的黑白棋游戏和一个主角通过黑白棋一步步战胜敌人最终如何如何这两类做对比。其实我个人是挺不喜欢把前者叫做游戏的，不过这样说起来我倒是异端了。不过反正也是个定义的问题也没有对错，曾经也将后者定义为交互艺术，（然而也很难说体育不能成为艺术虽然这样又扯远了但是大概就算说体育是艺术这两个艺术所指代的概念也是不一样的）。写到这里感觉一些SLG游戏的区分就有点模糊了像三国志啊海岛大亨什么的……大家怎么想呢？ 如何欣赏一个游戏？从哪个角度评价游戏的好坏呢？当然是有多少玩家氪金了！唔开个玩笑。我尚不知道最好的方法，然而很多人将游戏与电影对比，毕竟它们更为接近。我也上了一学期的电影赏析课，就就着两者的区别和共同点慢慢探索吧。 一部电影一般来说是讲述一个故事，但其与现实世界的不同在于电影通过剪辑可以打破线性的结构，也可以通过不同的视角来讲故事。但一部电影的目的并不单纯是展示一种剪辑风格，而是将其作为一种手段，为导演所想要表达的内容服务，这有可能是一个好故事，有可能是一种思想，也有可能就是想展现一种镜头语言和剪辑风格。类比到游戏，游戏的交互性也是为主题、故事、或是玩法服务的。 【待续，待整理","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"游戏体验","slug":"游戏体验","permalink":"http://maliut.space/tags/游戏体验/"}]},{"title":"直与弯：我们喜欢的究竟是什么？","slug":"bent-and-straight","date":"2014-12-07T16:00:00.000Z","updated":"2019-08-06T15:00:00.258Z","comments":true,"path":"2014/bent-and-straight/","link":"","permalink":"http://maliut.space/2014/bent-and-straight/","excerpt":"草稿涉及到爱情本质的问题有空再写","text":"草稿涉及到爱情本质的问题有空再写 喜欢康德：物自体不可知 我们对外界事物的任何认识，实质上只不过是在脑中建构出关于事物的概念，也就是说我们并不是认识事物本身，而是它带给我们的感觉。 同理，当我们说『喜欢xxx』时，我们喜欢的也并不是xxx本身，而是它带给我们的感觉。 性别性别可以分成生理学性别和社会学性别 生理学性别就是生理学上根据拥有染色体、器官种类等定义出来的。用哲学一点的话讲，就是根据第一世界的东西定义在第三世界中的概念。 相对来说社会学性别就是第四世界中的概念（对较为公认的社会学性别来说）。 # 这就是所谓【可爱的男孩子】，当你不知道他是男孩子之前也会蠢蠢欲动。也用来解释有些bl一个人扮演女生的角色。（当然心理学上也存在男生喜欢肌肉男的这并不否认） 【所以只是喜欢看jpg也是很正常的啊 【待续","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"人类观察","slug":"人类观察","permalink":"http://maliut.space/tags/人类观察/"}]},{"title":"测试项目","slug":"test-project","date":"2014-12-07T16:00:00.000Z","updated":"2019-08-06T15:00:00.288Z","comments":true,"path":"2014/test-project/","link":"","permalink":"http://maliut.space/2014/test-project/","excerpt":"","text":"这是一个项目","categories":[{"name":"项目","slug":"proj","permalink":"http://maliut.space/categories/proj/"}],"tags":[]},{"title":"Hello World Again！","slug":"Hello-world-again","date":"2014-12-06T16:00:00.000Z","updated":"2019-08-06T15:00:00.255Z","comments":true,"path":"2014/Hello-world-again/","link":"","permalink":"http://maliut.space/2014/Hello-world-again/","excerpt":"from the start of wordpress@aliyun 我们总是希望有一个地方来记录自己，哪怕只是一次又一次的开坑。","text":"from the start of wordpress@aliyun 我们总是希望有一个地方来记录自己，哪怕只是一次又一次的开坑。 我们总是渴望被人理解，却又逃避社交，渴望从回忆中得到慰藉。藉由回忆的极端化效应【←我自己编的你来打我啊】而使看待现实的眼光更加消极。 但是我就是我。追求真实但是明明知道根本找不到真实，追求所谓的真实但有不忍直视。雪之下主张改变，大老师主张面对，这两者又有什么区别呢？关键是，我正走在成为我所希望成为的人的道路上，这就够了。","categories":[{"name":"生活","slug":"life","permalink":"http://maliut.space/categories/life/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://maliut.space/tags/个人/"}]}]}